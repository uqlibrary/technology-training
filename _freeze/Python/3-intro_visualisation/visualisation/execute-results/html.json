{
  "hash": "b61c3f3f063c73cc5c2d19f16e5f89b6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Python Training (3 of 4): Introductory Data Visualisation'\njupyter: python3\n---\n\n<!-- Upcoming workshops -->\n:::{.callout-tip}\n# Upcoming workshop(s) available!\n\nThe next workshop is on **Tue Nov 18 at 09:30 AM.**\n\n[Book in to the next offering now.](https://studenthub.uq.edu.au/students/events/detail/5909086)\n\nAlternatively, [check our calendar](https://web.library.uq.edu.au/study-and-learning-support/training-and-workshops/online-and-person-workshops#keyword=;campus=;weekstart=) for future events.\n:::\n<!-- Upcoming workshops -->\n:::{.callout-tip}\n# Upcoming workshop(s) available!\n\nThe next workshop is on **Tue Nov 18 at 09:30 AM.**\n\n[Book in to the next offering now.](https://studenthub.uq.edu.au/students/events/detail/5909086)\n\nAlternatively, [check our calendar](https://web.library.uq.edu.au/study-and-learning-support/training-and-workshops/online-and-person-workshops#keyword=;campus=;weekstart=) for future events.\n:::\n<!-- Upcoming workshops -->\n:::{.callout-tip}\n# Upcoming workshop(s) available!\n\nThe next workshop is on **Tue Nov 18 at 09:30 AM.**\n\n[Book in to the next offering now.](https://studenthub.uq.edu.au/students/events/detail/5909086)\n\nAlternatively, [check our calendar](https://web.library.uq.edu.au/study-and-learning-support/training-and-workshops/online-and-person-workshops#keyword=;campus=;weekstart=) for future events.\n:::\nIn this third workshop we will cover\n\n-   Simple visualisations with seaborn\n-   Making modifications with matplotlib\n\n## Setting up\n\n\n### Spyder version\n\nBefore we begin, please check which version of Spyder you're using (you can see this in the Anaconda Navigator, or in Help > About Spyder). **If it's less than 6**, you should update Spyder before continuing. However, if you're in a workshop, this will take too long - instead, use the following workaround if your plots don't work:\n\n```python\nplt.show()\n```\n\nMore on this later.\n\n### Modules and data\n\nWe'll need three modules today:\n\n::: {#06316d20 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\nFor this workshop we’ll be working from the “Players2024.csv” dataset. If you don't have it yet,\n\n1. [Download the dataset](data/Players2024.csv).\n2. Create a folder in **in the same location as your script** called \"data\".\n3. Save the dataset there.\n\nWe should then bring it in with pandas:\n\n::: {#5f422b3a .cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.read_csv(\"data/Players2024.csv\")\n```\n:::\n\n\nTake a quick peak at the dataset to remind yourself\n\n::: {#818b1380 .cell execution_count=3}\n``` {.python .cell-code}\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        name  birth_date  height_cm   positions nationality  \\\n0               James Milner  1986-01-04      175.0    Midfield     England   \n1        Anastasios Tsokanis  1991-05-02      176.0    Midfield      Greece   \n2              Jonas Hofmann  1992-07-14      176.0    Midfield     Germany   \n3                 Pepe Reina  1982-08-31      188.0  Goalkeeper       Spain   \n4              Lionel Carole  1991-04-12      180.0    Defender      France   \n...                      ...         ...        ...         ...         ...   \n5930  Oleksandr Pshenychnyuk  2006-05-01      180.0    Midfield     Ukraine   \n5931            Alex Marques  2005-10-23      186.0    Defender    Portugal   \n5932             Tomás Silva  2006-05-25      175.0    Defender    Portugal   \n5933             Fábio Sambú  2007-09-06      180.0      Attack    Portugal   \n5934          Hakim Sulemana  2005-02-19      164.0      Attack       Ghana   \n\n      age                                    club  \n0      38  Brighton and Hove Albion Football Club  \n1      33        Volou Neos Podosferikos Syllogos  \n2      32             Bayer 04 Leverkusen Fußball  \n3      42                             Calcio Como  \n4      33                      Kayserispor Kulübü  \n...   ...                                     ...  \n5930   18              ZAO FK Chornomorets Odessa  \n5931   18                  Boavista Futebol Clube  \n5932   18                  Boavista Futebol Clube  \n5933   17                  Boavista Futebol Clube  \n5934   19                    Randers Fodbold Club  \n\n[5935 rows x 7 columns]\n```\n:::\n:::\n\n\n## Seaborn for simple visualisations\n\nTo begin our visualisations, we’ll use the package\n[seaborn]((https://seaborn.pydata.org/index.html)), which allows you to\nquickly whip up decent graphs.\n\nSeaborn has three plotting functions\n\n```python\nsns.catplot(...) # for categorical plotting, e.g. bar plots, box plots etc.\nsns.relplot(...) # for relational plotting, e.g. line plots, scatter plots\nsns.displot(...) # for distributions, e.g. histograms\n```\n\nWe’ll begin with the first.\n\n> It’s called “seaborn” as a reference to fictional character [Sam\n> Seaborn](https://en.wikipedia.org/wiki/Sam_Seaborn), whose initials\n> are “sns”.\n\n### Categorical plots\n\nCategorical plots are produced with seaborn’s `sns.catplot()` function.\nThere are two key pieces of information to pass:\n\n-   The data\n-   The variables\n\nLet’s see if there’s a relationship between the players’ **heights** and\n**positions**, by placing their positions on the $x$ axis and heights on\nthe $y$.\n\n::: {#5c1be808 .cell execution_count=4}\n``` {.python .cell-code}\nsns.catplot(data = df, x = \"positions\", y = \"height_cm\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-5-output-1.png){width=487 height=470}\n:::\n:::\n\n\nOur first graph! This is called a *swarm* plot; it’s like a scatter plot\nfor categorical variables.\n\n:::{.callout-warning collapse=\"true\"}\n# If your plots don't appear...\n\n...***AND*** you don't have an error, then you might have a Spyder version with a bug. \n\nThe simplest workaround is to run `plt.show()` every time you make a plot. If you have time, you should update Spyder.\n:::\n\nIt’s already revealed two things to us about the data:\n\n-   There are some incorrect heights - nobody is shorter than 25cm!\n-   Someone’s position is “missing”\n\nLet’s get rid of these with the data analysis techniques from last\nsession\n\n::: {#50dc005e .cell execution_count=5}\n``` {.python .cell-code}\n# Remove missing position\ndf = df[df[\"positions\"] != \"Missing\"]\n\n# Ensure reasonable heights\ndf = df[df[\"height_cm\"] > 100]\n```\n:::\n\n\nRun the plot again, it’s more reasonable now\n\n::: {#957e504f .cell execution_count=6}\n``` {.python .cell-code}\nsns.catplot(data = df, x = \"positions\", y = \"height_cm\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-7-output-1.png){width=487 height=470}\n:::\n:::\n\n\n#### Bar plots\n\nSwarm plots are interesting but not standard. You can change the plot\ntype with the `kind` parameter\n\n::: {#fc23d77b .cell execution_count=7}\n``` {.python .cell-code}\nsns.catplot(data = df, x = \"positions\", y = \"height_cm\", kind = \"bar\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-8-output-1.png){width=487 height=470}\n:::\n:::\n\n\n> Many aspects of your plot can be adjusted by sending in additional\n> parameters and is where seaborn excels.\n\nIt seems like goalkeepers are taller, but not by much. Let’s look at the\nstandard deviation for each position by changing the `estimator =`\nparameter (default is mean)\n\n::: {#1c11e2b5 .cell execution_count=8}\n``` {.python .cell-code}\nsns.catplot(data = df, x = \"positions\", y = \"height_cm\", kind = \"bar\", estimator = \"std\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-9-output-1.png){width=488 height=470}\n:::\n:::\n\n\nClearly there’s a lot less variation in goalkeepers - they’re all tall.\n\n#### Detour - line length\n\nNotice that our last line was longer than 79 characters? That’s bad\nPython, and hard to read. We can fix this by making it a multi-line\nfunction, placing arguments on new lines, according to [PEP\n8](https://peps.python.org/pep-0008/#code-lay-out)\n\n::: {#461d0225 .cell execution_count=9}\n``` {.python .cell-code}\nsns.catplot(data = df, x = \"positions\", y = \"height_cm\", kind = \"bar\", \n            estimator = \"std\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-10-output-1.png){width=488 height=470}\n:::\n:::\n\n\n#### Box plots\n\nLet’s make box plots instead. It’s the same procedure, just change to\n`kind = \"box\"` and remove `estimator =`\n\n::: {#1fb682dd .cell execution_count=10}\n``` {.python .cell-code}\nsns.catplot(data = df, x = \"positions\", y = \"height_cm\", kind = \"box\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-11-output-1.png){width=487 height=470}\n:::\n:::\n\n\nJust as we predicted.\n\n### Distributions\n\n#### Histograms\n\nLet’s move to the “Age” parameter now. We can look at the distribution\nof ages with\n\n::: {#786c07d0 .cell execution_count=11}\n``` {.python .cell-code}\nsns.displot(data = df, x = \"age\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-12-output-1.png){width=470 height=470}\n:::\n:::\n\n\nLooks a bit funny with those gaps - let’s change the number of bins with\n`bins = 28`\n\n::: {#3f8448cf .cell execution_count=12}\n``` {.python .cell-code}\nsns.displot(data = df, x = \"age\", bins = 28)\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-13-output-1.png){width=470 height=470}\n:::\n:::\n\n\nNow, what if you wanted to look at the distribution for different\nvariables? We can make a separate distribution for each position with\nthe `col = \"positions\"` argument, specifying a new row for each position\n\n::: {#0f7627de .cell execution_count=13}\n``` {.python .cell-code}\nsns.displot(data = df, x = \"age\", bins = 28, col = \"positions\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-14-output-1.png){width=1910 height=470}\n:::\n:::\n\n\n#### Kernel density estimates\n\nFinally, you don’t *have* to do histograms. You could also do a Kernel\nDensity Estimate, with `kind = \"kde\"` (let’s remove `bins =` and\n`row =`)\n\n::: {#458b4910 .cell execution_count=14}\n``` {.python .cell-code}\nsns.displot(data = df, x = \"age\", kind = \"kde\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-15-output-1.png){width=470 height=470}\n:::\n:::\n\n\nIf you want a separate line for each position, we should indicate that\neach position needs a different colour/hue with `hue = \"positions\"`\n\n::: {#b1bd33aa .cell execution_count=15}\n``` {.python .cell-code}\nsns.displot(data = df, x = \"age\", hue = \"positions\", kind = \"kde\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-16-output-1.png){width=603 height=470}\n:::\n:::\n\n\n### Activity 1\n\nCreate a histogram which looks at the distribution of heights, with a\nseparate distribution for each position, distinguished by colour. Then,\nuse the `multiple = \"stack\"` parameter to make it a bit neater.\n\n:::{.callout-note collapse=\"true\"}\n# Solution\n\n::: {#64e1d819 .cell execution_count=16}\n``` {.python .cell-code}\nsns.displot(data = df, x = \"height_cm\", hue = \"positions\", multiple = \"stack\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-17-output-1.png){width=603 height=470}\n:::\n:::\n\n\n:::\n\n### Relational plots\n\nIt seems like players peak in their mid-twenties, but goalkeepers stay\nfor longer. Let’s see if there’s a relationship between players’ **age**\nand **height**\n\n#### Scatter plots\n\nWe’ll start with a scatter plot\n\n::: {#de2a2fb6 .cell execution_count=17}\n``` {.python .cell-code}\nsns.relplot(data = df, x = \"age\", y = \"height_cm\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-18-output-1.png){width=470 height=470}\n:::\n:::\n\n\nNot much of a trend there, although the bottom-right looks a bit emptier\nthan the rest (could it be that short old players are the first to\nretire?).\n\nWe can use `hue =` to have a look at positions again\n\n::: {#e271064a .cell execution_count=18}\n``` {.python .cell-code}\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", hue = \"positions\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-19-output-1.png){width=585 height=470}\n:::\n:::\n\n\nYup, goalkeepers are tall, and everyone else is a jumble.\n\n#### Line plots\n\nLet’s do a line plot of the average height per age.\n\n::: {#24db223f .cell execution_count=19}\n``` {.python .cell-code}\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", kind = \"line\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-20-output-1.png){width=470 height=470}\n:::\n:::\n\n\nSeems pretty flat, except the ends are a bit weird because there’s not\nmuch data. Let’s eliminate everything before 17 and after 38 and plot it\n\n::: {#45a66be0 .cell execution_count=20}\n``` {.python .cell-code}\n# Create smaller dataframe\ncondition = (df[\"age\"] > 17) & (df[\"age\"] < 38)\ninner_ages = df[condition]\n\n# Line plot\nsns.relplot(data = inner_ages, x = \"age\", y = \"height_cm\", kind = \"line\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-21-output-1.png){width=471 height=470}\n:::\n:::\n\n\nLooks a bit shaky but that’s just because it’s zoomed in - notice that\nwe go from 182cm to 184cm. We’ll fix this when we look at matplotlib in\nthe next section.\n\n#### Combining the two\n\nWe can combine our scatter and line plots together.\n\n1.  Make the first plot as normal\n2.  For all additional (overlaying) plots, use an **axes-level plot**\n    instead of `sns.relplot()` etc. These just draw the\n    points/bars/lines, and are normally behind-the-scenes. There’s one\n    for every plot type, and look like\n    -   `sns.lineplot()`\n    -   `sns.scatterplot()`\n    -   `sns.boxplot()`\n    -   `sns.histplot()`\n    -   etc.\n\nFor example,\n\n::: {#2ca48539 .cell execution_count=21}\n``` {.python .cell-code}\n# Figure level plot\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", hue = \"positions\")\n\n# Axes level plot (drop the kind = )\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-22-output-1.png){width=585 height=470}\n:::\n:::\n\n\n> **You can’t include `kind =` inside an axes level plot**\n\nLet’s swap the colour variable from the scatter plot to the line plot\n\n::: {#820623ae .cell execution_count=22}\n``` {.python .cell-code}\n# Figure level plot\nsns.relplot(data = df, x = \"age\", y = \"height_cm\")\n\n# Axes level plot (drop the kind = )\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-23-output-1.png){width=470 height=470}\n:::\n:::\n\n\nFinally, let’s make the scatter dots smaller with `s = 10` and grey with\n`color = \"grey\"`.\n\n::: {#f1611fb6 .cell execution_count=23}\n``` {.python .cell-code}\n# Figure level plot\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", s = 10, color = \"grey\")\n\n# Axes level plot (drop the kind = )\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-24-output-1.png){width=470 height=470}\n:::\n:::\n\n\n### Activity 2\n\nIt’s really important to become familiar with the documentation. Go to\nthe [`sns.relplot`\ndocumentation](https://seaborn.pydata.org/generated/seaborn.relplot.html),\nand look up the following parameters:\n\n-   `col`\n-   `col_wrap`\n-   `col_order`\n-   `hue_order`\n-   `legend`\n\nUsing those parameters, create a scatter plot for age vs height (like\nabove), which meets the following conditions:\n\n- Separate the plots for each position.\n- Apply a different colour to each position. \n- Arrange the plots in **two** columns\n- Remove the legend\n- Manually order the colours:\n    1.  Attack\n    2.  Midfield\n    3.  Defender\n    4.  Goalkeeper\n\n:::{.callout-tip}\n# Hint\nFor the ordering, you might want to make a list with the desired order, e.g. `order = [\"Attack\", \"Midfield\", ... ]`\n:::\n\n:::{.callout-note collapse=\"true\"}\n# Solution\n\n::: {#41b5d8b9 .cell execution_count=24}\n``` {.python .cell-code}\norder = [\"Attack\", \"Midfield\", \"Defender\", \"Goalkeeper\"]\n\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", hue = \"positions\", \n            col = \"positions\", col_wrap = 2, hue_order = order, \n            col_order = order)\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-25-output-1.png){width=1074 height=950}\n:::\n:::\n\n\n:::\n\n## Going deeper with `matplotlib`\n\nSeaborn is great for simple and initial visualisations, but when you\nneed to make adjustments it gets tricky. At its core, seaborn is just a\nsimple way of using [matplotlib](https://matplotlib.org/), an extensive\nand popular plotting package. It was created as a way of doing MATLAB\nvisualisations with Python, so if you’re coming from there, things will\nfeel familiar.\n\n**Pros**\n\n-   Customisable. You can tweak almost every parameter of the\n    visualisations\n-   Fast. It can handle large data\n-   Popular. Lots of people use it, and knowing it will help you\n    collaborate\n\n**Cons** - a bit programmy\n\n-   Steep-ish learning curve. Creating basic plots can be easy, but its\n    set up with enough complexity that it takes a bit of work to figure\n    out what’s going on.\n-   Cumbersome. You can tweak almost everything, but this means that it\n    can take some effort to tweak *anything*.\n\nWe’re barely going to touch the matplotlib surface, but we’ll look at\nsome essentials.\n\n### Saving plots\n\nBefore we move to adjusting the plot, let’s just look at how you save\nit. While you *can* do this with seaborn, the matplotlib way is also\nvery simple.\n\nAs a first step, you should make a new folder. Navigate using your file\nexplorer to the project and create a new folder called “plots”.\n\nNext, save the current plot with `plt.savefig(\"place_location_here\")`,\nand **we have to do this at the same time that we make the plot**. Let’s\nsave our previous overlaying plot:So run all this code at once:\n\n::: {#ac838792 .cell execution_count=25}\n``` {.python .cell-code}\n# Figure level plot\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", s = 10, color = \"grey\")\n\n# Axes level plot (drop the kind = )\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n\nplt.savefig(\"plots/first_saved_plot.png\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-26-output-1.png){width=470 height=470}\n:::\n:::\n\n\n### Making modifications\n\n#### Titles\n\nNotice that the $y$ axis has an ugly label? That’s because seaborn is\njust drawing from your dataframe.\n\nWe can change axis labels with `plt.ylabel()`\n\n::: {#cefa7857 .cell execution_count=26}\n``` {.python .cell-code}\n# Plotting functions\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", s = 10, color = \"grey\")\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n\n# Customisation\nplt.ylabel(\"Height (cm)\")\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nText(4.8166666666666655, 0.5, 'Height (cm)')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-27-output-2.png){width=470 height=470}\n:::\n:::\n\n\nand similarly you could change `plt.xlabel(...)`.\n\n> Make sure you run the above line **at the same time** as your plotting\n> function. You can either \\* Highlight **all** the code and press\n> <kbd>F9</kbd> \\* Make a cell with `#%%` and press <kbd>ctrl</kbd> +\n> <kbd>enter</kbd>\n\nWe can also change the legend title to “positions” with `plt.legend()`\n\n::: {#df856610 .cell execution_count=27}\n``` {.python .cell-code}\n# Plotting functions\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", s = 10, color = \"grey\")\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n\n# Customisation\nplt.ylabel(\"Height (cm)\")\nplt.legend(title = \"Positions\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-28-output-1.png){width=470 height=470}\n:::\n:::\n\n\nAnd its location with `loc = \"lower left\"`\n\n::: {#e28031f7 .cell execution_count=28}\n``` {.python .cell-code}\n# Plotting functions\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", s = 10, color = \"grey\")\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n\n# Customisation\nplt.ylabel(\"Height (cm)\")\nplt.legend(title = \"Positions\")\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-29-output-1.png){width=470 height=470}\n:::\n:::\n\n\nAnd give the whole plot a title with `plt.title()`\n\n::: {#f6a81da0 .cell execution_count=29}\n``` {.python .cell-code}\n# Figure level plot\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", s = 10, color = \"grey\")\n\n# Axes level plot (drop the kind = )\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n\n# Titles\nplt.ylabel(\"Height (cm)\")\nplt.legend(title = \"Positions\")\nplt.title(\"Are players' heights and ages related?\")\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nText(0.5, 1.0, \"Are players' heights and ages related?\")\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-30-output-2.png){width=470 height=490}\n:::\n:::\n\n\n### Annotations\n\nYou might want to annotate your plot with text and arrows. Text is\nsimple with the `plt.text()` function; we just need to specify its\ncoordinates and the contents.\n\n::: {#873d3d9a .cell execution_count=30}\n``` {.python .cell-code}\n# Figure level plot\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", s = 10, color = \"grey\")\n\n# Axes level plot (drop the kind = )\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n\n# Titles\nplt.ylabel(\"Height (cm)\")\nplt.legend(title = \"Positions\")\nplt.title(\"Are players' heights and ages related?\")\n\n# Annotations\nplt.text(38.5, 181, \"Not enough\\ndata for mean\")\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nText(38.5, 181, 'Not enough\\ndata for mean')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-31-output-2.png){width=500 height=490}\n:::\n:::\n\n\n> The characters `\\n` mean ‘new line’\n\nWe could annotate with arrows too. This is more complex, using the\n`plt.annotate()` function:\n\n::: {#1af75fbb .cell execution_count=31}\n``` {.python .cell-code}\n# Figure level plot\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", s = 10, color = \"grey\")\n\n# Axes level plot (drop the kind = )\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n\n# Titles\nplt.ylabel(\"Height (cm)\")\nplt.legend(title = \"Positions\")\nplt.title(\"Are players' heights and ages related?\")\n\n# Annotations\nplt.text(38.5, 181, \"Not enough\\ndata for mean\")\nplt.annotate(text = \"No short\\nolder players\", xy = [37,165], xytext = [40,172],\n             arrowprops = dict(width = 1, headwidth = 10, headlength = 10, \n                          facecolor = \"black\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nText(40, 172, 'No short\\nolder players')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-32-output-2.png){width=512 height=490}\n:::\n:::\n\n\n> I’ve split this over multiple lines, but its still **one function** -\n> check the brackets\n\nAll together, our plot has become\n\n### Axis limits\n\nThe last feature we’ll look at is editing axis limits. Let’s try to make\nmore room in the bottom left for the legend with the functions\n`plt.xlim()` and `plt.ylim()`\n\n::: {#1f44d201 .cell execution_count=32}\n``` {.python .cell-code}\n# Figure level plot\nsns.relplot(data = df, x = \"age\", y = \"height_cm\", s = 10, color = \"grey\")\n\n# Axes level plot (drop the kind = )\nsns.lineplot(data = inner_ages, x = \"age\", y = \"height_cm\", hue = \"positions\")\n\n# Titles\nplt.ylabel(\"Height (cm)\")\nplt.legend(title = \"Positions\", loc = \"lower left\")\nplt.title(\"Are players' heights and ages related?\")\n\n# Annotations\nplt.text(38.5, 181, \"Not enough\\ndata for mean\")\nplt.annotate(\"No short\\nolder players\", [37,165], [40,172], \n             arrowprops = dict(width = 1,headwidth = 10,headlength = 10, \n                               facecolor = \"black\"))\n\n# Axis limits\nplt.xlim([10,45])\nplt.ylim([150,210])\n```\n\n::: {.cell-output .cell-output-display}\n![](visualisation_files/figure-html/cell-33-output-1.png){width=500 height=490}\n:::\n:::\n\n\nI’m not sure that looks any better, but you get the idea!\n\n## Conclusion\n\nAs we have seen, seaborn and matplotlib are a powerful tools for\nvisualising data efficiently and aesthetically. A range of other plot\ntypes and customisation is available, for inspiration have a look at the\n[seaborn gallery](https://seaborn.pydata.org/examples/index.html) and\n[matplotlib gallery](https://matplotlib.org/stable/gallery/). If any of\nthe content here was too challenging, you have other related issues\nyou’d like to discuss or would simply like to learn more, we the\ntechnology training team would love to hear from you. You can contact us\nat <training@library.uq.edu.au>.\n\nHere’s a summary of what we’ve covered\n\n| Topic | Description |\n|------------------------------------|------------------------------------|\n| **Plotting** | Using `seaborn`’s `sns.catplot()` (categorical), `sns.relplot()` (relational, i.e. scatter & line) and `sns.displot()` (distributive) functions, we can make plots by specifying various parameters, e.g. `x = ...`, `y = ...`, `hue = ...`, etc. |\n| **Introducing variables into visualisations** | We don’t just have to use $x$- and $y$-axes: we can use colour (`hue = ...`), shape (`style = ...`), size (`size = ...`) and facets (`col = ...`, `row = ...`) to introduce more variables to our visualisations. |\n| **Overlaying plots** | By combining a figure-level plot (e.g. `sns.catplot()`) with multiple axes-level plots (e.g. `sns.boxplot()`), we can overlay multiple graphs onto the same visualisation |\n| **Saving figures** | We can use `matplotlib`’s function `plt.savefig(...)` to export our plots |\n| **Customisations** | The functions `plt.xlabel()`, `plt.ylabel()` and `plt.title()` allow you to customise your plot’s axes. The `plt.legend()` function modifies the legend, and `plt.xlim()` and `plt.ylim()` adjust the axis limits. |\n| **Annotations** | Use the functions `plt.text()` and `plt.annotate()` to draw lines and text on your visualisation. |\n\nBelow is a summary of *all* available\\* plots in seaborn. Most of these\nhave been examined in either the introductory session or this one,\nhowever, there are some which we have not yet looked at. The [seaborn\ndocumentation](https://seaborn.pydata.org/api.html) and\n[tutorials](https://seaborn.pydata.org/tutorial.html) provide\ndesciptions and advice for all available plots.\n\n> \\*As of v0.12.2\n\n### Figure- to Axes-level plot\n\nAll the plots below are figure-level. To produce the axes-level plot of\nthe same type, simply use\n\n```python\nsns.****plot()\n```\n\nwhere `****` is given in `kind = \"****\"` for the corresponding\nfigure-level plot. For example,\n\n\n```python\nsns.relplot( ..., kind = \"scatter\", ... ) # Figure-level scatter plot\nsns.scatterplot( ... ) # Axes-level scatter plot\n```\n\n### Relational Plots\n\n| Plot Name | Code | Notes |\n| --- | --- | --- |\n| Scatter Plot          | `sns.relplot( ... , kind = \"scatter\", ... )` | Requires numerical data |\n| Line Plot             | `sns.relplot( ... , kind = \"line\", ... )` | Requires numerical data | \n\n### Distributions\n\n| Plot Name | Code | Notes |\n| --- | --- | --- |\n| Histogram             | `sns.displot( ... , kind = \"hist\", ... )` | Can be univariate (`x` only) or bivariate (`x` and `y`)|\n| Kernel Density Estimate| `sns.displot( ... , kind = \"kde\" , ... )` | Can be univariate (`x` only) or bivariate (`x` and `y`)|\n| ECDF* | `sns.displot( ... , kind = \"ecdf\", ... )` | . |\n| Rug Plot              | `sns.displot( ... , rug = True , ... ) `  | Combine with another `sns.displot`, plots marginal distributions | \n\n> *Empirical Cumulative Distribution Functions\n\n### Categorical Plots\n\n| Plot Name | Code | Notes |\n| --- | --- | --- |\n| Strip Plot            | `sns.catplot( ... , kind = \"strip\" , ... )`| Like a scatterplot for categorical data |\n| Swarm Plot            | `sns.catplot( ... , kind = \"swarm\" , ... )`| . |\n| Box Plot              | `sns.catplot( ... , kind = \"box\" , ... )` | One variable is always interpreted categorically |\n| Violin Plot           | `sns.catplot( ... , kind = \"violin\" , ... )` | One variable is always interpreted categorically |\n| Enhanced Box Plot     | `sns.catplot( ... , kind = \"boxen\", ... )`  | A box plot with additional quantiles |\n| Point Plot            | `sns.catplot( ... , kind = \"point\" , ... ) ` | Like a line plot for categorical data | \n| Bar Plot              | `sns.catplot( ... , kind = \"bar\" , ... ) `    | Aggregates data | \n| Count Plot            | `sns.catplot( ... , kind = \"count\" , ... )` | A bar plot with the total number of observations |\n\n\n### Other Plots\n| Plot Name | Code | Notes |\n| --- | --- | --- |\n| Pair Plot             | `sns.pairplot( ... )` | A form of facetting |\n| Joint Plot            | `sns.jointplot( ... )` | . |\n| Regressions           | `sns.lmplot( ... )` | . |\n| Residual Plot         | `sns.residplot( ... )` | The residuals of a linear regression |\n| Heatmap               | `sns.heatmap( ... )`  | . |\n| Clustermap            | `sns.clustermap( ... )` | . |\n\n\n## Resources\n\n- [Official seaborn documentation](https://seaborn.pydata.org/index.html)\n- [Official matplotlib documentation](https://matplotlib.org/stable/index.html)\n- Our [compilation of useful Python links](https://github.com/uqlibrary/technology-training/blob/master/Python/useful_links.md)\n\n",
    "supporting": [
      "visualisation_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}