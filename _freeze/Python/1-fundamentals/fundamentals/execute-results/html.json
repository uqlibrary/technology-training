{
  "hash": "e448c75d221204b6ef0572fbb43fda64",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python training (1 of 4): The fundamentals\"\n---\n\n\n\n\n\nThis hands-on programming course – directed at beginners – will get you started on using **Python 3** and the program **Spyder** to import, explore, analyse and visualise data.\n\n## Setup\n\nThe easiest way to use Python 3 and Spyder is to [install the Anaconda Distribution](https://www.anaconda.com/products/distribution), a data science platform for Windows, Linux and macOS.\n\nOpen the Anaconda Navigator (you might have to run `anaconda-navigator` from a terminal on Linux), and launch Spyder. On some operating systems, you might be able to find Spyder directly in your applications.\n\n## Introducing Python and Spyder\n\nPython is a **programming language** that can be used to build programs (i.e. a \"general programming language\"), but it can also be used to analyse data by importing a number of useful modules.\n\nWe are using **Spyder** to interact with Python more comfortably. If you have used RStudio to interact with R before, you should feel right at home: Spyder is a program designed for doing data science with Python.\n\nWe will start by using the **console** to work interactively. This is our direct line to the computer, and is the simplest way to run code. Don't worry about any unfamiliar language, fonts or colours - we can ignore most of it for now - all you need to know is that\n\n- `In [1]: ...` is code that we've sent to the computer, and\n- `Out[1]: ...` is its response.\n\n### Maths\n\nTo start with, we can use Python like a calculator. Type the following **commands** in the console, and press <kbd>Enter</kbd> to **execute** them:\n\n::: {#0f47976b .cell execution_count=1}\n``` {.python .cell-code}\n1 + 1\n2 * 3\n4 / 10\n5 ** 2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n25\n```\n:::\n:::\n\n\nAfter running each command, you should see the result as an output.\n\n## Variables\n\n### Numbers\n\nMost programming languages are like spoken language in that they have nouns and verbs - you have \"things\" and they \"do things\". In Python, we have **variables** and **functions**. We'll look first at variables, the nouns of Python, which store data.\n\nTo create a variable, we choose its name (e.g. `favNumber`) and assign (`=`) it a value (e.g. `42`):\n\n::: {#cf639376 .cell execution_count=2}\n``` {.python .cell-code}\nexample_int = 42\n```\n:::\n\n\nYou can then retrieve the value by running the variable name on its own:\n\n::: {#a069da64 .cell execution_count=3}\n``` {.python .cell-code}\nexample_int\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n42\n```\n:::\n:::\n\n\nLet's create more variables. We can use the variable names in place of their values, so we can perform maths:\n\n::: {#f4b05d94 .cell execution_count=4}\n``` {.python .cell-code}\nexample_float = 5.678\nexample_int * example_float\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n238.476\n```\n:::\n:::\n\n\nSo far, we've only looked at numbers. If you click on the \"variable explorer\" tab, you should see two variables.\n\nNotice that the \"Type\" of `example_int` is `int`, while the other is `float`. These are different **variable types** and can operate differently. `int` means integer, and corresponds to whole numbers, while `float` stands for floating point number, meaning decimals. You may occasionally encounter errors where you can only use one type.\n\n### Booleans\n\nEven simpler than integers is the **boolean** type. These are either 1 or 0 (True or False), representing a single binary unit (bit). Don't be fooled by the words, these work like numbers: `True + True` gives `2`.\n\n::: {#97f8e644 .cell execution_count=5}\n``` {.python .cell-code}\nexample_bool = True\n```\n:::\n\n\n> In Python, the boolean values `True` and `False` **must** begin with a capital letter.\n\n### Sequences\n\nLet's look at variable types which aren't (necessarily) numbers. **Sequences** are variables which store more than one data point. For example, **strings** store a sequence of characters and are created with quotation marks `'<insert string>' ` or `\"<insert string>\"`:\n\n::: {#a5cb3b82 .cell execution_count=6}\n``` {.python .cell-code}\nexample_string = 'Hello world!'\n```\n:::\n\n\nWe can also create **lists**, which will store several variables (not necessarily of the same type). We need to use square brackets for that:\n\n::: {#602a7194 .cell execution_count=7}\n``` {.python .cell-code}\nexample_list = [38, 3, 54, 17, 7]\ndiverse_list = [3, 'Hi!', 9.0]\n```\n:::\n\n\nLists are very flexible as they can contain any number of items, and any type of data. You can even nest lists inside a list, which makes for a very flexible data type.\n\nOperations on sequences are a bit different to numbers. We can still use `+` and `*`, but they will concatenate (append) and duplicate, rather than perform arithmetic.\n\n::: {#5c02dae5 .cell execution_count=8}\n``` {.python .cell-code}\nexample_string + ' How are you?'\nexample_list + diverse_list\n3 * example_list\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n[38, 3, 54, 17, 7, 38, 3, 54, 17, 7, 38, 3, 54, 17, 7]\n```\n:::\n:::\n\n\nHowever, depending on the variable, some operations won't work:\n\n::: {#bdd49b63 .cell execution_count=9}\n``` {.python .cell-code}\nexample_string + example_int\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[9], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">example_string</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">+</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">example_int</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: can only concatenate str (not \"int\") to str</pre>\n```\n:::\n\n:::\n:::\n\n\nThere are other data types like tuples, dictionaries and sets, but we won't look at those in this session. Here's a summary of the ones we've covered:\n\n| Category | Type | Short name | Example | Generator |\n| --- | --- | --- | --- | --- |\n| Numeric | Integer | `int` | `3` | `int()` |\n| Numeric | Floating Point Number | `float` | `4.2` | `float()` |\n| Numeric | Boolean | `bool` | `True` | `bool()`|\n| Sequence | String | `str` | `'A sentence '` | `\" \"` or `' '` or `str()` |\n| Sequence | List | `list` | `['apple', 'banana', 'cherry']` | `[ ]` or `list()` |\n\nThe **generator** commands are new. We use these to manually change the variable type. For example, \n\n::: {#20f04cca .cell execution_count=10}\n``` {.python .cell-code}\nint(True)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n1\n```\n:::\n:::\n\n\nyields `1`, converting a **boolean** into an **integer**. These commands are **functions**, as opposed to variables - we'll look at functions a bit later.\n\n\n#### Indexing\n\nWe can access part of a sequence by **indexing**. Sequences are ordered, **starting at 0**, so the first element has index 0, the second index 1, the third 2 and so on. For example, see what these commands return:\n\n::: {#4eba4db3 .cell execution_count=11}\n``` {.python .cell-code}\nexample_string[0]\nexample_string[6]\nexample_list[4]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n7\n```\n:::\n:::\n\n\nIf you want more than one element in a sequence, you can **slice**. Simple slices specify a range to slice, from the first index to the last, **but not including the last**. For example:\n\n::: {#8a0e9e37 .cell execution_count=12}\n``` {.python .cell-code}\nexample_list[0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n[38, 3, 54, 17]\n```\n:::\n:::\n\n\nThat command returns elements from position 0 up to - but not including! - position 4.\n\n## Scripts and Projects\n\nSo far, we've been working in the console, our direct line to the computer. However, it is often more convenient to use a **script**. These are simple text files which store code and run when we choose. They are useful to\n\n- write code more comfortably,\n- store clearly defined steps in chronological order,\n- share a process with peers easily, and\n- make your work reproducible\n\nLet's create a folder system to store our script in by creating a **project**. \n\n- Press `Projects > New project... ` and name your project, perhaps \"python_fundamentals\".\n- Create a new script with <kbd>ctrl</kbd>+<kbd>N</kbd>, `File > New file...` or the new file button ![new file symbol](new_file.png) .\n\nYou should now see a script on the left panel in Spyder, looking something like this:\n\n![Example of a new script](new_script.png)\n\nTry typing a line of code in your new script, such as\n\n::: {#a747b091 .cell execution_count=13}\n``` {.python .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n2\n```\n:::\n:::\n\n\nPress <kbd>F9</kbd> to run each line, or <kbd>ctrl</kbd>+<kbd>enter</kbd> for the whole script. You should see something like the following appear in the **console** (depending on how you ran it):\n\n![Example of a console input](new_script.png)\n\nWe'll work out of a script for the rest of the session. Don't forget to save your script by pressing <kbd>ctrl</kbd>+<kbd>S</kbd> or the save button ![save file symbol](save_file.png).\n\n## Functions\n\n**Functions** are little programs that do specific jobs. These are the verbs of Python, because they do things to and with our variables. Here are a few examples of built-in functions:\n\n::: {#2b9bb416 .cell execution_count=14}\n``` {.python .cell-code}\nexample_list = [1,2,3,4]\nlen(example_list)\nmin(example_list)\nmax(example_list)\nsum(example_list)\nround(5.123)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n5\n```\n:::\n:::\n\n\nFunctions always have parentheses after their name, and they can take one or several **arguments**, or none at all, depending on what they can do, and how the user wants to use them.\n\nHere, we use two arguments to modify the default behaviour of the `round()` function:\n\n::: {#6d69159d .cell execution_count=15}\n``` {.python .cell-code}\nround(5.123, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n5.12\n```\n:::\n:::\n\n\n> Notice how Spyder gives you hints about the available arguments after typing the function name?\n\n### Operators\n\nOperators are a special type of function in Python with which you're already familiar. The most important is ` = `, which assigns values to variables. Here is a summary of some important operators, although there are many others:\n\n#### General\n| Operator | Function | Description | Example command |\n| --- | --- | --- | --- |\n| = | Assignment | Assigns values to variables | `a = 7` | \n| # | Comment | Excludes any following text from being run | `# This text will be ignored by Python`\n\n#### Mathematical\n| Operator | Function | Description | Example command | Example output |\n| --- | --- | --- | --- | --- |\n| + | Addition | Adds or concatenates values, depending on variable types | `7 + 3` or `\"a\" + \"b\"` | `10` or `'ab'` |\n| - | Subtraction | Subtracts numerical values | `8 - 3` | `5` |\n| * | Multiplication | Multiplies values, depending on variable types | `7 * 2` or `\"a\" * 3` | `14` or `'aaa'`|\n| / | Division | Divides numerical vlues | `3 / 4` | `0.75` |\n| ** | Exponentiation | Raises a numerical value to a power | `7 ** 2` | `49` |\n| % | Remainder | Takes the remainder of numerical values | `13 % 7` | `6` |\n\n#### Comparison\n| Operator | Function | Description | Example command | Example output |\n| --- | --- | --- | --- | --- |\n| == | Equal to | Checks whether two variables are the same and outputs a boolean | `1 == 1` | `True` |\n| != | Not equal to | Checks whether two variables are different | `'1' != 1` | `True` |\n| > | Greater than | Checks whether one variable is greater than the other | `1 > 1` | `False` |\n| >= | Greater than or equal to | Checks whether greater than (>) or equal to (==) are true | `1 >= 1` | `True` |\n| < | Less than | Checks whether one variable is less than the other | `0 < 1` | `True` |\n| <= | Less than or equal to | Checks whether less than (<) or equal to (==) are true | `0 <= 1` | `True` |\n\n## Finding help\n\nTo find help about a function, you can use the `help()` function, or a `?` after a function name:\n\n::: {#8f27aab8 .cell execution_count=16}\n``` {.python .cell-code}\nhelp(max)\nprint?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -> value\n    max(arg1, arg2, *args, *[, key=func]) -> value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.\n\n```\n:::\n:::\n\n\nIn Spyder, you can use the <kbd>Ctrl</kbd> + <kbd>I</kbd> keyboard shortcut to open the help in a separate pane.\n\n> The help information can often be dense and difficult to read at first, taking some practice. In the [next session](https://github.com/uqlibrary/technology-training/blob/4ea3e86ab8f6f43a73c3b3a44d63a00ac8d366f8/Python/revamp/data_transformation.md) we look closer at interpreting this **documentation**, one of the most important Python skills.\n\nFor a comprehensive manual, go to the [official online documentation](https://docs.python.org/). For questions and answers, typing the right question in a search engine will usually lead you to something helpful. If you can't find an answer, [StackOverflow is a great Q&A community](https://stackoverflow.com/questions/tagged/python).\n\n## Activity 1\n\nIn this first activity, write a program which takes an age in years and outputs how many minutes they've lived for. Note that\n\n$$\\text{Age (minutes)} = \\text{Age (years)} \\times 365 \\times 24 \\times 60$$\n\nSteps\n\n* Store the age in years in a variable\n* Calculate the age in minutes\n* Print a message with the output\n\n> Note: if you want to print a number (e.g. the age), the easiest way is to send multiple arguments to the print function. For example,\n> `print(\"The first number is\", 1)`\n\n<!--\n### Stage 2\n\nNext, we'll get the user to provide the age themselves. To prompt the user for to submit a value, we need to use a new command: `input`.\n\n::: {#73a82152 .cell execution_count=17}\n``` {.python .cell-code}\nnumber = int(input(\"Pick a number: \"))\n```\n:::\n\n\nHere, `input` asks the user to pick a number. After the user (you) types something into the console and presses <kbd>enter</kbd>, it is saved by Python in the variable `number`. Note that we need to put the input inside an `int( ... )` function to turn it into a number.\n\n-->\n<details>\n<summary>Solution</summary>\n\nWe have three lines of code corresponding to the steps above:\n\n::: {#31b07618 .cell execution_count=18}\n``` {.python .cell-code}\n### Age in minutes calculator\n  \n# Input age\nage_years = 56\n\n# Calculate age in mins\nage_mins = age_years * 365 * 24 * 60\n\n# Print result\nprint(\"You have lived for\", str(age_mins), \"minutes!\")\n```\n:::\n\n\n</details>\n\n## Conditionals\n\nFunnelling code through different blocks based on conditions is a fundamental element of all programming, and achieved in Python with conditionals. The most important is the `if` statement, which checks a condition and runs the **indented** code block if it returns `True`:\n\n::: {#4c8266c7 .cell execution_count=19}\n``` {.python .cell-code}\nif 1 + 1 == 2:\n    print(\"We are inside the if statement!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWe are inside the if statement!\n```\n:::\n:::\n\n\nHere's how it works\n1. `if` starts the conditional.\n2. `1 + 1 == 2` is the condition - this comes after `if`, and must return `True` (1) or `False` (0).\n3. The colon, `:`, indicates that the condition is finished and the code block is next\n4. `    print(\" ...` the **indented** code is only run if the condition is `True` (1).\n\nTry altering the condition, and see if the code runs.\n\nObviously, $1 + 1 = 2$, so this will always run and we don't need to use an `if` statement. Let's replace the condition with variables:\n\n::: {#ba8d2939 .cell execution_count=20}\n``` {.python .cell-code}\nname = \"your_name\"\n\nif len(name) > 5:\n  print(name + \" is longer than 5 letters!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nyour_name is longer than 5 letters!\n```\n:::\n:::\n\n\nHere, we're checking if the length of `name` is greater than `5`. Note that `name + \" is longer than 5!\"` concatenates (combines) the strings together.\n\n<blockquote>\n### Advanced\n\nUsing `name + \" is longer than 5!\"` is a bit clunky, there is a better way to include variables in strings, called **f-strings**.\n\n::: {#87381a8e .cell execution_count=21}\n``` {.python .cell-code}\nname = \"your_name\"\n\nif len(name) > 5:\n  print(f\"{name} is longer than 5 letters!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nyour_name is longer than 5 letters!\n```\n:::\n:::\n\n\nBy putting `f` before `'` or `\"`, Python will insert any code run between curly brackets `{ }` into the string. Here, running `name` just returns \"apple\".\n\n</blockquote>\n\n### `elif` and `else`\n\nThere are two other commands for conditionals: `elif` and `else`.\n\n`elif` is short for *else if*, and can be used after an if statement to apply another condition, **if** the first one fails.\n\n::: {#74296f47 .cell execution_count=22}\n``` {.python .cell-code}\nname = \"your_name\"\n\nif len(name) > 5:\n  print(name + \" is longer than 5 letters!\")\n\nelif len(name) > 3:\n  print(name + \" is longer than 3 letters, but not more than 5\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nyour_name is longer than 5 letters!\n```\n:::\n:::\n\n\nHere, if the `name` is longer than `5`, it will run in the `if` block and skip `elif`. Otherwise, it will check the `elif` condition and run if it's `True`.\n\nFinally, `else` comes at the end of a conditional and will run if all other conditions failed\n\n::: {#949e3c6a .cell execution_count=23}\n``` {.python .cell-code}\nname = \"your_name\"\n\nif len(name) > 5:\n    print(name + \" is longer than 5 letters!\")\n\nelif len(name) > 3:\n    print(name + \" is longer than 3 letters, but not more than 5\")\n\nelse:\n    print(name + \" is 3 letters long or shorter.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nyour_name is longer than 5 letters!\n```\n:::\n:::\n\n\nYou can only have one `if` and `else` statement, but as many `elif`s as you'd like.\n\n<!--\n\n## Loops\n\nFor programming to speed up repetitive tasks we need to use loops. These run a code block multiple times, and there are two types: `while` and `for` loops.\n\n### `while` loops\n\n`while` loops run the code block until the condition is `False`, with similar syntax to `if` statements:\n\n::: {#d7bc053e .cell execution_count=24}\n``` {.python .cell-code}\na = 0\n\nwhile a < 10:\n    print(a)\n    a = a + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n:::\n:::\n\n\n> **WARNING**\n> \n> `while` loops can cause an infinite loop to occur if the condition is never `False`. If this happens, press <kbd>ctrl</kbd>+<kbd>C</kbd> or the red square in the console to stop the code.\n> \n> ![image](https://github.com/uqlibrary/technology-training/assets/118239146/a8ba8293-c64b-4994-9869-074a6d12e0a0)\n\n### `for` loops\n\n`for` loops iterate through a variable, like a list:\n\n::: {#796e798a .cell execution_count=25}\n``` {.python .cell-code}\nexample_list = [1,2,3,4]\n\nfor element in example_list:\n    print(element)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n```\n:::\n:::\n\n\nThese work a bit differently. Each time the loop runs, a variable (here called `element`) stores one of the values in the container (here called `myList`). The loop runs once for each element in the container, working from the start to the finish.\n\n\n## Activity 2\n\nThe second activity is a name comparer. Here, we will write code which identifies the letters in common between two names. \n\nWe'll need to use the command `in` for this activity. It checks whether a variable on the left exists inside a variable on the write, for example\n\n::: {#d2278e53 .cell execution_count=26}\n``` {.python .cell-code}\n\"app\" in \"apple\"\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nTrue\n```\n:::\n:::\n\n\nwill return `True`. We can use this for conditionals, like\n\n::: {#9689f03a .cell execution_count=27}\n``` {.python .cell-code}\nword = \"apple\"\nsmaller = \"app\"\n\nif smaller in word:\n    print(smaller + \"can be found inside\" + word)\nelse:\n    print(smaller + \"is not inside\" + word)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nappcan be found insideapple\n```\n:::\n:::\n\n\nWe will also need to use a *method*. These are functions that only apply to certain variables, and we access them using dot `.` notation. Here, we will use the list method `.append`:\n\n::: {#ce7da6d5 .cell execution_count=28}\n``` {.python .cell-code}\na = [1, 2, 3]\na.append(4)\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\nThe list `a` is originally just `[1, 2, 3]`, but after running `a.append(4)`, it appends the element 4 to the end, making it `[1, 2, 3, 4]`.\n\nAll together, for this activity we will need to \n\n- Ask the user for their first name using `input( ... )`\n- Ask the user for their last/second name using `input( ... )`\n- Initialise a list of common letters using `common = []` (this will let us append to it later)\n- Use a `for` loop to iterate through the each letter in the first name\n- Use an `if` statement to check if each letter is inside the last/second name\n- Print a message stating the common letters\n\n<details>\n  <summary>Solution</summary>\n  \n  One solution could be the following:\n\n\n  ::: {#00cb9fd0 .cell execution_count=29}\n  ``` {.python .cell-code}\n  # Name comparer\n  \n  # Ask user for names\n  firstname = input(\"What is your first name? \")\n  surname = input(\"What is your surname? \")\n  \n  # Initialise list of common letters\n  common = [] \n  \n  # Loop through each letter in first name\n  for letter in firstname:\n    \n      # Check if the letter is in the second word\n      if letter in surname:\n        \n          # Add it to the list of common letters\n          common.append(letter)\n          \n  # Print final list of letters\n  print(\"The letter(s) in common between your names are: \")\n  print(common)\n  ```\n  :::\n  \n  \n</details>\n-->\n\n## Packages\n\nPython is set apart from other languages by the scale of its community packages and the ease with which you import them. While you *could* code everything you need from scratch, it's often more effective to import someone else's predefined functions. \n\n### Built-in packages\n\nPython comes with a number of pre-installed packages, so they're already on your computer. However, your specific Python application doesn't have access to them until they're imported:\n\n::: {#62a8b9e1 .cell execution_count=30}\n``` {.python .cell-code}\nimport math\n```\n:::\n\n\nThe module `math` brings in some mathematics constants and functions. For example, you will get an **error** if you run `pi` on its own, but we can access the constant using the module:\n\n::: {#42b9465d .cell execution_count=31}\n``` {.python .cell-code}\nmath.pi\n2*math.pi\nmath.cos(math.pi)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n-1.0\n```\n:::\n:::\n\n\nNote that we use a period `.` in order to access objects inside the module. In general, we use periods in Python to access objects stored inside other objects.\n\n### Naming\n\nSome modules have long names and use abbreviated nicknames when imported.\n\n::: {#b63fc783 .cell execution_count=32}\n``` {.python .cell-code}\nimport math as m\nm.pi\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n3.141592653589793\n```\n:::\n:::\n\n\nHere the module `math` is stored as `m` in Python. \n\nWhere this naming is used, it is usually the standard, and sharing code with different (including original/full) module names will not be compatible with other programmers.\n\n### External packages\n\nThere are hundreds of thousands of external packages available, and you need to install them before importing them as above. There are many ways to install packages, and two most common:\n\n#### Using `pip`\n\nIf you are **not** using Anaconda, then the most common way to install a package is using the command `pip`, which installs packages from the Python Package Index (PyPI)\n\n::: {#e3c148ad .cell execution_count=33}\n``` {.python .cell-code}\npip install numpy\n```\n:::\n\n\n> If this doesn't work for you, try using `!pip install numpy` - using an exclamation mark `!` sends your command straight to your operating system shell\n\n#### Using `conda`\n\nIf you are using **Anaconda**, then the recommended installation method is using the `conda` command, which installs from Anaconda's package database:\n\n::: {#9975e9e2 .cell execution_count=34}\n``` {.python .cell-code}\nconda install numpy\n```\n:::\n\n\n> As above, if this doesn't work for you, try using `!pip install numpy` - using an exclamation mark `!` sends your command straight to your operating system shell\n\n#### Common packages\n\nOnce installed, you can import these modules as before. Here, we've installed `numpy`, which is a popular numerical package.\n\n::: {#e42f4a1c .cell execution_count=35}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\nNumpy is useful for its arrays, which allow you to apply mathematics to lists. For example, we can multiply each element in the array by $4$ with\n\n::: {#741db333 .cell execution_count=36}\n``` {.python .cell-code}\nexample_list = [1,2,3,4]\nexample_array = np.array(example_list)\nexample_array * 4\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\narray([ 4,  8, 12, 16])\n```\n:::\n:::\n\n\nSome popular packages include\n\n| Package | Install command | Import command | Description |\n| ---- | ---- | ---- | ---- |\n| NumPy | `pip/conda install numpy` | `import numpy as np` | A **num**erical **Py**thon package, providing mathematical functions and constants, vector analysis, linear algebra etc. |\n| Pandas | `pip/conda install pandas` | `import pandas as pd` | **Pan**el **Da**ta  - data transformation, manipulation and analysis |\n| Matplotlib | `pip/conda install matplotlib` | `import matplotlib.pyplot as plt` | **Mat**hematical **plot**ing **lib**rary, a popular visualisation tool. Note that there are other ways to import it, but the `.pyplot` submodule as `plt` is most common. |\n| Seaborn | `pip/conda install seaborn` | `import seaborn as sns` | Another visualisation tool, closer to ggplot2 in R, built upon a matplotlib framework. |\n| SciPy | `pip/conda install scipy` | `import scipy` or `import scipy as sp` | A **sci**entific **Py**thon package with algorithms and models for analysis and statistics. |\n| Statsmodels | `pip/conda install statsmodels` | `import statsmodels.api as sm` and/or `import statsmodels.tsa.api as tsa`| **Stat**istical **model**ling. The first import `sm` is for cross-sectional models, while `tsa` is for time-series models. | \n| Requests | `pip/conda install requests` | `import requests` | Make HTTP (internet) **requests**. |\n| Beautiful Soup | `pip/conda install beautifulsoup4` | `from bs4 import BeautifulSoup` | Collect HTML data from websites. | \n\n## Activity 2\n\nIn this final activity, we're going to create some sample data and visualise it.\n\n**Our goal is to import and visualise random BMI data**\n\nWe'll complete this in two parts. Before we begin, we need to set things up by importing the modules we need\n\n::: {#43f3a8b6 .cell execution_count=37}\n``` {.python .cell-code}\nimport pandas as pd\nimport seaborn as sns\n```\n:::\n\n\n> If importing any of these causes an error, it could be because you haven't installed it yet. See [above](#External-packages) for information on how to do so.\n\nBefore we begin this activity we should bring in the data. To do this, we use the `pd.read_csv()` function, specifying the file path as the first argument (this can be a URL), and store it in a variable (typically `df`). For example,\n\n::: {#3ebcdb40 .cell execution_count=38}\n``` {.python .cell-code}\ndf = pd.read_csv(\"insert_filepath_here\")\n```\n:::\n\n\nToday's data is five (random) people's height and weight. You can download it [here](https://uqpug.github.io/datasets/BMI_data.csv).\n\n1. Download the data\n2. Move the data into your project folder\n3. Read it in with `df = pd.read_csv(\"BMI_data.csv\")`\n\n### Part 1: Modifying the data\n\nFor the first part of the challenge, you'll need to compute each person's BMI, and store it in a new column. For reference, we access columns by indexing based on their name, e.g. `df[\"Weight\"]` is the Weight column. To make a new column, we pretend that it already exists and assign into it. For example, to convert from kilograms to pounds,\n\n::: {#838b5bf1 .cell execution_count=39}\n``` {.python .cell-code}\n# Create a new column called Weight (lb) and store the weight in pounds\ndf[\"Weight (lb)\"] = df[\"Weight\"]*2.205\n```\n:::\n\n\nTo compute the BMIs, make another new column and use the following formula to calculate the BMI.\n\n$$ \\text{BMI} = \\frac{\\text{Weight (kg)}}{(\\text{Height (cm)})^2} $$\n\nIt should look something like\n\n::: {#f47a6fe3 .cell execution_count=40}\n``` {.python .cell-code}\ndf[\"BMI\"] = ...\n```\n:::\n\n\n> Hint: $x^2$ is `x**2`\n\nOnce you've done these steps, you should see the following:\n\n::: {#0d07edac .cell execution_count=41}\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Names</th>\n      <th>Height</th>\n      <th>Weight</th>\n      <th>Weight (lb)</th>\n      <th>BMI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Alice</td>\n      <td>1.90</td>\n      <td>94</td>\n      <td>207.27</td>\n      <td>26.038781</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>1.81</td>\n      <td>102</td>\n      <td>224.91</td>\n      <td>31.134581</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Charlie</td>\n      <td>1.87</td>\n      <td>108</td>\n      <td>238.14</td>\n      <td>30.884498</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Dilsah</td>\n      <td>1.88</td>\n      <td>84</td>\n      <td>185.22</td>\n      <td>23.766410</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Eliza</td>\n      <td>1.68</td>\n      <td>108</td>\n      <td>238.14</td>\n      <td>38.265306</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<details>\n\n<summary>Solution</summary>\n\nOne solution could be the following:\n\n::: {#c34ff339 .cell execution_count=42}\n``` {.python .cell-code}\n# Import packages\nimport pandas as pd\nimport seaborn as sns\n\n# Import data - don't forget to change the file path as you need\ndf = pd.read_csv(\"BMI_data.csv\")\n\n# Example - create a new column called Weight (lb) and store the weight in pounds\ndf[\"Weight (lb)\"] = df[\"Weight\"]*2.205\n\n# Create BMI column\ndf[\"BMI\"] = df[\"Weight\"] / (df[\"Height\"]**2)\n\n# Look at the data\ndf\n```\n:::\n\n\n</details>\n\n### Part 2: Visualisation\n\nTo visualise the data, we can use the **seaborn** module, with the function `sns.catplot( ... )`. Inside the function, we'll need to specify the `x` and `y` values, and if we specifically want a bar plot, `kind` as well. Use the `help()` documentation to see if you can visualise the data we just created. See if you can produce something like the following plot:\n\n::: {#50b09547 .cell execution_count=43}\n\n::: {.cell-output .cell-output-display}\n![](fundamentals_files/figure-html/cell-44-output-1.png){width=487 height=470}\n:::\n:::\n\n\nYou'll need to start with\n\n::: {#b0c28454 .cell execution_count=44}\n``` {.python .cell-code}\nsns.catplot(data = df, x = ...)\n```\n:::\n\n\n> Hint: You only need to use the `data = `, `x = `, `y = ` and `kind = ` parameters, so try figure out what they require!\n\n<details>\n\n<summary>Solution</summary>\n\nThe plot above is produced with the code\n\n::: {#587df91e .cell execution_count=45}\n``` {.python .cell-code}\n# Visualise\nsns.catplot(data = df, x = \"Names\", y = \"BMI\", kind = \"bar\")\n```\n:::\n\n\n</details>\n\n\n## Conclusion and saving your work\n\nYour project can be reopened from the \"Projects\" menu in Spyder.\n\nBy default, your variables are *not* saved, which is another reason why working with a script is important: you can execute the whole script in one go to get everything back. You can however save your variables as a `.spydata` file if you want to (for example, if it takes a lot of time to process your data).\n\n### Summary\n\nToday we looked at a lot of Python features, so don't worry if they haven't all sunk in. Programming is best learned through practice, so keep at it! Here's a rundown of the concepts we covered\n\n| Concept | Desctiption |\n| --- | --- |\n| **The console vs scripts** | The **console** is our window into the computer, this is where we send code directly to the computer. **Scripts** are files which we can write, edit, store and run code, that's where you'll write most of your Python. | \n| **Variables** | **Variables** are the nouns of programming, this is where we store information, the objects and things of our coding. They come in different types like integers, strings and lists. |\n| **Indexing** | In order to access elements of a sequence variable, like a list, we need to **index**, e.g. `myList[2]`. Python counts from 0.\n| **Functions** | **Functions** are the verbs of programming, they perform actions on our variables. Call the function by name and put inputs inside parentheses, e.g. `round(2.5)` | \n| **Help** | Running `help( ... )` will reveal the **help** documentation about a function or type. |\n| **Conditionals** | `if`, `elif` and `else` statements allow us to run code if certain **conditions** are true, and skip it otherwise. |\n| **Loops** | `while` **loops** will repeatedly run code until a condition is no longer true, and `for` **loops** will iterate through a variable | \n| **Packages** | We can bring external code into our environment with `import ... `. This is how we use **packages**, an essential for Python. Don't forget to install the package first! | \n\n### Next session\n\nThanks for completing this introductory session to Python! You're now ready for our next session, [Data Transformation](https://github.com/uqlibrary/technology-training/blob/55946e771a59b0d82e02e69b25917ad5a0ca5588/Python/revamp/data_transformation.md), which looks at using the **pandas** package in greater depth.\n\nBefore you go, don't forget to check out the [Python User Group](bit.ly/uqpug), a gathering of Python users at UQ.\n\nFinally, if you need any support or have any other questions, shoot us an email at [training@library.uq.edu.au](training@library.uq.edu.au).\n\n",
    "supporting": [
      "fundamentals_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}