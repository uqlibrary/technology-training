{
  "hash": "c75825d5844a0c312385bc2e366e6a72",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Training (2 of 4): Managing Data\"\n--- \n\n<!-- Upcoming workshops -->\n:::{.callout-tip}\n# Upcoming workshop(s) available!\n\nThe next workshop is on **Tue Nov 11 at 09:30 AM.**\n\n[Book in to the next offering now.](https://studenthub.uq.edu.au/students/events/detail/5909085)\n\nAlternatively, [check our calendar](https://web.library.uq.edu.au/study-and-learning-support/training-and-workshops/online-and-person-workshops#keyword=;campus=;weekstart=) for future events.\n:::\n<!-- Upcoming workshops -->\n:::{.callout-tip}\n# Upcoming workshop(s) available!\n\nThe next workshop is on **Tue Nov 11 at 09:30 AM.**\n\n[Book in to the next offering now.](https://studenthub.uq.edu.au/students/events/detail/5909085)\n\nAlternatively, [check our calendar](https://web.library.uq.edu.au/study-and-learning-support/training-and-workshops/online-and-person-workshops#keyword=;campus=;weekstart=) for future events.\n:::\n<!-- Upcoming workshops -->\n:::{.callout-tip}\n# Upcoming workshop(s) available!\n\nThe next workshop is on **Tue Nov 11 at 09:30 AM.**\n\n[Book in to the next offering now.](https://studenthub.uq.edu.au/students/events/detail/5909085)\n\nAlternatively, [check our calendar](https://web.library.uq.edu.au/study-and-learning-support/training-and-workshops/online-and-person-workshops#keyword=;campus=;weekstart=) for future events.\n:::\n\nIn this second workshop we will cover\n\n- Examining / exploring data\n- Filtering rows and columns\n- Basic descriptive statistics\n- Adding new columns\n- Group bys and summary tables\n\nThis hands-on course -- directed at intermediate users -- looks at using the **pandas** module to transform and visualise tabular data.\n\n## Setting up\n\n### Scripts and projects\n\nRecall that we typically write code in scripts and store them in a project. We'll do the same here.\n\n1. Create / open a project. If you made one last week, feel free to continue working there. Otherwise, press `Projects > New project... ` and name your project, perhaps \"python_data_processing\".\n2. Create a new script with <kbd>ctrl</kbd>+<kbd>N</kbd>, `File > New file...` or the new file button.\n\n### Introducing pandas\n\nPandas is a Python module that introduces dataframes to Python. It gives us the tools we need to clean and transform data with Python.\n\nTo be able to use the functions included in pandas, we have to first import it:\n\n::: {#122dfd03 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n`pd` is the usual nickname for the pandas module.\n\n> If you get an error, like `No module named 'pandas'`, you'll need to install it first, using either `conda install pandas` or `pip install pandas`, depending on your Python installation.\n\n#### The DataFrame object\n\nPandas is built upon one key feature: the DataFrame class. In Python we have different built-in types, like `int` for integers and `string` for characters. Pandas introduces a new type, `DataFrame`, which stores data like a spreadsheet.\n\n### Setting up the workspace\n\nTo make life easy, we should set up our workspace well. \n\n1. Open your project folder using your file explorer, and create a new folder called \"data\". \n2. [Download the data for today's session](data/Players2024.csv)\n3. Move the file into your new \"data\" folder\n4. Next, open your project in Spyder, and create a new script called \"analysis.py\".\n5. Open the \"Files\" tab in Spyder and check that you see two objects:\n   * The file \"analysis.py\"\n   * The folder \"data\"\n \n### Importing data\n\nPandas offers a simple way to access data with its `read.csv()` function. We'll save it into the variable `df_raw`:\n\n::: {#d477de9e .cell execution_count=2}\n``` {.python .cell-code}\ndf_raw = pd.read_csv(\"data/Players2024.csv\")\n```\n:::\n\n\n> You can also provide a URL instead of a file path!\n\n### Aside - File Paths and backslashes\nJust a quick detour to discuss file paths of which there are two types: **absolute** and **relative**\n\n#### Absolute\n\nAbsolute file paths always start at the \"top\" of your file system, e.g. one of the drives (like C:) for Windows users, so they are never ambiguous. It's like providing your full street address from country to street number.\n\n```bash\nC:/Users/my_username/research/data/really_important_secret_data.csv\n```\n\n#### Relative\n\nRelative file paths start from **your current working directory**, which is usually the top folder of a Spyder project. For files in my current folder, I just provide their name - like referring to another house on your street as \"number 7\". **Let's assume we're in the \"research\" folder**.\n\n```bash\nfile_in_my_current_folder.csv\n```\n\nWe can go to *down* folders from our current location:\n\n```bash\ndata/really_important_secret_data.csv\n```\n\nAnd we can go *up* folders from our current location\n```bash\n../../this_file_is_two_levels_up.csv\n```\n\nOr a combination of the two (e.g. up one, then down into a *different* folder)\n```bash\n../not_research/this_file_is_not_research.csv\n```\n\n**What matters is that the relative reference depends on where your code is and will break if you move the script!**\n\n#### Backslashes\n\nOne last note: Windows uses backslashes for their file paths\n```bash\nC:\\Users\\...\n```\nBut Python uses backslashes as an escape character. For example, `\"\\n\"` is a newline, `\"\\u1234\"` is the unicode character U+1234 and confusingly `\"\\\\\"` is a **single** backslash. The easist way to get around this is by prefixing `R` to all strings: this makes them *raw*.\n\n::: {#c02b3198 .cell execution_count=3}\n``` {.python .cell-code}\nwindows_url = R\"C:\\\\Users\\...\"\n```\n:::\n\n\n### Initial look at the data\n\nLet's get back to data.\n\nWe can investigate the size of the data thanks to the `shape` attribute attached to all pandas dataframes:\n\n::: {#869aa43f .cell execution_count=4}\n``` {.python .cell-code}\ndf_raw.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n(5935, 7)\n```\n:::\n:::\n\n\nThe dataset contains dozens of columns. What are their names?\n\n::: {#cfdfcf67 .cell execution_count=5}\n``` {.python .cell-code}\ndf_raw.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nIndex(['name', 'birth_date', 'height_cm', 'positions', 'nationality', 'age',\n       'club'],\n      dtype='object')\n```\n:::\n:::\n\n\nLet's subset our data to focus on a handful of variables.\n\n### Creating a backup\n\nData analysis in Python is safe because our variables are *copies* of the data - we aren't actually changing the files until we explicitly overwrite them. However, Python also has no *undo*, so if I delete something in my analysis, I can't get it back - I have to start all over again.\n\nOne way to mitigate this issue is by making a copy of the data\n\n::: {#bebe5edf .cell execution_count=6}\n``` {.python .cell-code}\ndf = df_raw.copy()\n```\n:::\n\n\nNow we have two variables: `df` is what we'll use, and `df_raw` stores the raw data. If we ever need to restart, we can simply run `df = df_raw.copy()`.\n\n## Accessing and Filtering Data\n\nSo how do we access our data in Python? We use a type of indexing introduced by pandas, which revolves around using square brackets after the dataframe: `df[...]`.\n\n### Accessing columns\nTo access a column, index with its name: `df[\"column_name\"]`. For example, \n\n::: {#b03bad1c .cell execution_count=7}\n``` {.python .cell-code}\ndf[\"name\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0                 James Milner\n1          Anastasios Tsokanis\n2                Jonas Hofmann\n3                   Pepe Reina\n4                Lionel Carole\n                 ...          \n5930    Oleksandr Pshenychnyuk\n5931              Alex Marques\n5932               Tomás Silva\n5933               Fábio Sambú\n5934            Hakim Sulemana\nName: name, Length: 5935, dtype: object\n```\n:::\n:::\n\n\nreturns the \"name\" column. We can access multiple by providing a **list** of names\n\n::: {#50dea496 .cell execution_count=8}\n``` {.python .cell-code}\n# Save the names in a list and then index\ncolumn_names = [\"name\", \"club\"]\ndf[column_names]\n\n# This is equivalent to\ndf[[\"name\", \"club\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>club</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>James Milner</td>\n      <td>Brighton and Hove Albion Football Club</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Anastasios Tsokanis</td>\n      <td>Volou Neos Podosferikos Syllogos</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Jonas Hofmann</td>\n      <td>Bayer 04 Leverkusen Fußball</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Pepe Reina</td>\n      <td>Calcio Como</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lionel Carole</td>\n      <td>Kayserispor Kulübü</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5930</th>\n      <td>Oleksandr Pshenychnyuk</td>\n      <td>ZAO FK Chornomorets Odessa</td>\n    </tr>\n    <tr>\n      <th>5931</th>\n      <td>Alex Marques</td>\n      <td>Boavista Futebol Clube</td>\n    </tr>\n    <tr>\n      <th>5932</th>\n      <td>Tomás Silva</td>\n      <td>Boavista Futebol Clube</td>\n    </tr>\n    <tr>\n      <th>5933</th>\n      <td>Fábio Sambú</td>\n      <td>Boavista Futebol Clube</td>\n    </tr>\n    <tr>\n      <th>5934</th>\n      <td>Hakim Sulemana</td>\n      <td>Randers Fodbold Club</td>\n    </tr>\n  </tbody>\n</table>\n<p>5935 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nIf we want to *do* anything with it (like statistics or visualisation), it's worth saving the column(s) as a new variable\n\n::: {#5de2559f .cell execution_count=9}\n``` {.python .cell-code}\ndf_subset = df[[\"name\", \"club\"]]\n```\n:::\n\n\n### Accessing rows\nThere's a few ways to access rows. The easiest is by slicing, `df[start_row : end_row]`. For example, if you want rows 5 to 10,\n\n::: {#a810bbb3 .cell execution_count=10}\n``` {.python .cell-code}\ndf[5 : 10]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>birth_date</th>\n      <th>height_cm</th>\n      <th>positions</th>\n      <th>nationality</th>\n      <th>age</th>\n      <th>club</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>Ludovic Butelle</td>\n      <td>1983-04-03</td>\n      <td>188.0</td>\n      <td>Goalkeeper</td>\n      <td>France</td>\n      <td>41</td>\n      <td>Stade de Reims</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Daley Blind</td>\n      <td>1990-03-09</td>\n      <td>180.0</td>\n      <td>Defender</td>\n      <td>Netherlands</td>\n      <td>34</td>\n      <td>Girona Fútbol Club S. A. D.</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Craig Gordon</td>\n      <td>1982-12-31</td>\n      <td>193.0</td>\n      <td>Goalkeeper</td>\n      <td>Scotland</td>\n      <td>41</td>\n      <td>Heart of Midlothian Football Club</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Dimitrios Sotiriou</td>\n      <td>1987-09-13</td>\n      <td>185.0</td>\n      <td>Goalkeeper</td>\n      <td>Greece</td>\n      <td>37</td>\n      <td>Omilos Filathlon Irakliou FC</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Alessio Cragno</td>\n      <td>1994-06-28</td>\n      <td>184.0</td>\n      <td>Goalkeeper</td>\n      <td>Italy</td>\n      <td>30</td>\n      <td>Associazione Calcio Monza</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n> Note that the end row is **not included**\n\nIf you want to access a single row, we need to use `df.loc[]` or `df.iloc[]`. These are the go-to methods for accessing data if the above indexing isn't sufficient.\n\n* `df.loc[]` accesses rows by label (defaults to row number but could be anything)\n* `df.iloc[]` accesses rows by row number exclusively\n\nBy default they line up, so\n\n::: {#de95e91f .cell execution_count=11}\n``` {.python .cell-code}\ndf.loc[5]\ndf.iloc[5]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nname           Ludovic Butelle\nbirth_date          1983-04-03\nheight_cm                188.0\npositions           Goalkeeper\nnationality             France\nage                         41\nclub            Stade de Reims\nName: 5, dtype: object\n```\n:::\n:::\n\n\nare often (**but not always**) the same.\n\nFinally, we can filter specific rows **by a condition** on one of the variables, e.g. *only rows where variable $\\text{age} > 25$*.\n\n::: {#18ebf619 .cell execution_count=12}\n``` {.python .cell-code}\ndf[df[\"age\"] > 25]\n# Or any other condition\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>birth_date</th>\n      <th>height_cm</th>\n      <th>positions</th>\n      <th>nationality</th>\n      <th>age</th>\n      <th>club</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>James Milner</td>\n      <td>1986-01-04</td>\n      <td>175.0</td>\n      <td>Midfield</td>\n      <td>England</td>\n      <td>38</td>\n      <td>Brighton and Hove Albion Football Club</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Anastasios Tsokanis</td>\n      <td>1991-05-02</td>\n      <td>176.0</td>\n      <td>Midfield</td>\n      <td>Greece</td>\n      <td>33</td>\n      <td>Volou Neos Podosferikos Syllogos</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Jonas Hofmann</td>\n      <td>1992-07-14</td>\n      <td>176.0</td>\n      <td>Midfield</td>\n      <td>Germany</td>\n      <td>32</td>\n      <td>Bayer 04 Leverkusen Fußball</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Pepe Reina</td>\n      <td>1982-08-31</td>\n      <td>188.0</td>\n      <td>Goalkeeper</td>\n      <td>Spain</td>\n      <td>42</td>\n      <td>Calcio Como</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lionel Carole</td>\n      <td>1991-04-12</td>\n      <td>180.0</td>\n      <td>Defender</td>\n      <td>France</td>\n      <td>33</td>\n      <td>Kayserispor Kulübü</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5155</th>\n      <td>Leo Scienza</td>\n      <td>1998-09-13</td>\n      <td>175.0</td>\n      <td>Attack</td>\n      <td>Brazil</td>\n      <td>26</td>\n      <td>1. Fußballclub Heidenheim 1846</td>\n    </tr>\n    <tr>\n      <th>5236</th>\n      <td>Mohamed Brahimi</td>\n      <td>1998-09-17</td>\n      <td>181.0</td>\n      <td>Attack</td>\n      <td>France</td>\n      <td>26</td>\n      <td>FK Fakel Voronezh</td>\n    </tr>\n    <tr>\n      <th>5287</th>\n      <td>Nicolás Marotta</td>\n      <td>1996-12-23</td>\n      <td>186.0</td>\n      <td>Defender</td>\n      <td>Argentina</td>\n      <td>27</td>\n      <td>Athens Kallithea Football Club</td>\n    </tr>\n    <tr>\n      <th>5471</th>\n      <td>Daniel Sosah</td>\n      <td>1998-09-21</td>\n      <td>179.0</td>\n      <td>Attack</td>\n      <td>Niger</td>\n      <td>26</td>\n      <td>FK Kryvbas Kryvyi Rig</td>\n    </tr>\n    <tr>\n      <th>5478</th>\n      <td>Egas Cacintura</td>\n      <td>1997-10-29</td>\n      <td>174.0</td>\n      <td>Midfield</td>\n      <td>Angola</td>\n      <td>26</td>\n      <td>Dinamo Makhachkala</td>\n    </tr>\n  </tbody>\n</table>\n<p>2757 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\nAs with the column case, it's useful to save this as a variable\n\n::: {#f952be49 .cell execution_count=13}\n``` {.python .cell-code}\ndf_filtered = df[df[\"age\"] > 15]\n```\n:::\n\n\n## Basic statistics\n\nHow might we perform some basic statistics on our data?\n\nTo check what kind of data each column is stored as, we can use the `dtypes` attribute:\n\n::: {#6d70e494 .cell execution_count=14}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nname            object\nbirth_date      object\nheight_cm      float64\npositions       object\nnationality     object\nage              int64\nclub            object\ndtype: object\n```\n:::\n:::\n\n\n> In general, pandas will bring in numbers with `float64` and non-numeric data with `object`.\n\nThe `describe()` method is useful for descriptive statistics about our numerical columns:\n\n::: {#a36c20cf .cell execution_count=15}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>height_cm</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5935.000000</td>\n      <td>5935.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>182.986352</td>\n      <td>25.501769</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.478313</td>\n      <td>4.455595</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>17.000000</td>\n      <td>15.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>178.000000</td>\n      <td>22.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>183.000000</td>\n      <td>25.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>188.000000</td>\n      <td>29.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>206.000000</td>\n      <td>42.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHowever, it will only show the two first ones and two last ones. We can focus on a specific column instead, for example one that was hidden previously:\n\n::: {#6070ad4c .cell execution_count=16}\n``` {.python .cell-code}\ndf[\"age\"].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\ncount    5935.000000\nmean       25.501769\nstd         4.455595\nmin        15.000000\n25%        22.000000\n50%        25.000000\n75%        29.000000\nmax        42.000000\nName: age, dtype: float64\n```\n:::\n:::\n\n\nOr a categorical column:\n\n::: {#c79134bb .cell execution_count=17}\n``` {.python .cell-code}\ndf[\"nationality\"].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\ncount      5935\nunique      135\ntop       Spain\nfreq        402\nName: nationality, dtype: object\n```\n:::\n:::\n\n\n> For a categorical column, the information shown is different: for example, how many unique values there are, and what the most common value is.\n\nWhat if you want specific statistics about a particular column? Usually there are methods available:\n\n::: {#e2a13fef .cell execution_count=18}\n``` {.python .cell-code}\n# Applicable to all columns\ndf[\"nationality\"].count()\ndf[\"nationality\"].unique()\n\n# For numeric columns only\ndf[\"height_cm\"].min()\ndf[\"height_cm\"].max()\ndf[\"height_cm\"].mean()\ndf[\"height_cm\"].median()\ndf[\"height_cm\"].std()\n# ...\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nnp.float64(7.478312588515905)\n```\n:::\n:::\n\n\nWe can use these methods to filter our data. For example, the row which has the maximum value of variable $x$ is\n\n::: {#c370ecf3 .cell execution_count=19}\n``` {.python .cell-code}\nx_max = df[\"height_cm\"].max()\ndf[df[\"height_cm\"] == x_max]\n\n# Or in one line\ndf[df[\"height_cm\"] == df[\"height_cm\"].max()]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>birth_date</th>\n      <th>height_cm</th>\n      <th>positions</th>\n      <th>nationality</th>\n      <th>age</th>\n      <th>club</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4179</th>\n      <td>Kevin Gadellaa</td>\n      <td>2003-04-08</td>\n      <td>206.0</td>\n      <td>Goalkeeper</td>\n      <td>Netherlands</td>\n      <td>21</td>\n      <td>Football Club Utrecht</td>\n    </tr>\n    <tr>\n      <th>4810</th>\n      <td>Isaak Touré</td>\n      <td>2003-03-28</td>\n      <td>206.0</td>\n      <td>Defender</td>\n      <td>France</td>\n      <td>21</td>\n      <td>Udinese Calcio</td>\n    </tr>\n    <tr>\n      <th>5565</th>\n      <td>Denys Tvardovskyi</td>\n      <td>2003-06-13</td>\n      <td>206.0</td>\n      <td>Goalkeeper</td>\n      <td>Ukraine</td>\n      <td>21</td>\n      <td>FC Shakhtar Donetsk</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Activity 1\nRun the following lines:\n\n::: {#a37287ee .cell execution_count=20}\n``` {.python .cell-code}\nprint(df[\"height_cm\"].min())\nprint(df[\"positions\"].unique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n17.0\n['Midfield' 'Goalkeeper' 'Defender' 'Attack' 'Missing']\n```\n:::\n:::\n\n\nNotice anything odd? There's some dubious data - remove the dodgy entries.\n\n> Hint: Nobody is 17cm tall, and we don't want to keep anyone with the \"Missing\" position either\n\n:::{.callout-note collapse=\"true\"}\n# Solution\n\n::: {#008b923a .cell execution_count=21}\n``` {.python .cell-code}\n# Remove rows with unreasonable heights\ndf = df[df[\"height_cm\"] > 100]\n\n# Remove the rows with position = \"Missing\"\ndf = df[df[\"positions\"] != \"Missing\"]\n```\n:::\n\n\n:::\n\nIf that was too quick try to reduce your dataset to $\\le 3$ variables (columns) and $\\le 100$ rows using conditions by filtering down to a particular subset of your data. Make sure you keep the **age** and **height_cm** columns.\n\n## Adding and removing columns\nSometimes we need to add new columns. It's the same process as overwriting existing columns - let's make a new column called \"zeroes\" where every row is 0\n\n::: {#1ef51725 .cell execution_count=22}\n``` {.python .cell-code}\ndf[\"zeroes\"] = 0\n```\n:::\n\n\nWe can also send in a column, for example\n\n::: {#ce68dae8 .cell execution_count=23}\n``` {.python .cell-code}\ndf[\"copy_of_names\"] = df[\"name\"]\n```\n:::\n\n\nPerhaps most usefully, we can manipulate the column we send in. For example, the deviation from the mean\n$$|\\bar{x} - x_i|$$\ncan be computed for each row's height:\n\n::: {#791535c0 .cell execution_count=24}\n``` {.python .cell-code}\ncol_x = df[\"height_cm\"]\navg_x = df[\"height_cm\"].mean()\n\ndf[\"deviation_from_mean_height\"] = abs(col_x - avg_x)\n\n# Or all together on one line,\ndf[\"deviation_from_mean_height\"] = abs(df[\"height_cm\"] - df[\"height_cm\"].mean())\n```\n:::\n\n\nwhere `abs(...)` takes the absolute value\n\nNotice that we subtracted a value from a column. We can also perform mathematics with multiple columns:\n\n::: {#483fdd9d .cell execution_count=25}\n``` {.python .cell-code}\ndf[\"product\"] = df[\"age\"]*df[\"height_cm\"]\n```\n:::\n\n\nLet's remove these new columns that we don't need with the method `df.drop(columns = [...])`:\n\n::: {#446f0778 .cell execution_count=26}\n``` {.python .cell-code}\ndf = df.drop(columns = [\"zeroes\", \"copy_of_names\", \"deviation_from_mean_height\", \"product\"])\n```\n:::\n\n\n## Summaries\n\nAfter cleaning up our data, we need to analyse it. This usually involves some kind of aggregation. For example, *what is the average $x$ per year?* requires aggregating over variable $x$ for each year. \n\nFirst, we need to group by a specific variable\n\n::: {#d395e193 .cell execution_count=27}\n``` {.python .cell-code}\ngb = df.groupby(\"age\")\n```\n:::\n\n\nThis thing in itself is a pretty abstract Python object, best thought of as a dataframe where we've identified a grouping variable.\n\nNext, we need to apply some aggregation to it (the groupby tells it to do it for each year)\n\n::: {#e38722c3 .cell execution_count=28}\n``` {.python .cell-code}\navg_height_by_age = gb[\"height_cm\"].agg(\"mean\")\n```\n:::\n\n\nOf course, we could have done this in one line:\n\n::: {#c840849f .cell execution_count=29}\n``` {.python .cell-code}\navg_height_by_age = df.groupby(\"age\")[\"height_cm\"].agg(\"mean\")\n```\n:::\n\n\nThis is a really useful tool, because now we have something we can *visualise*. As the next session will show us, the visualisation tools generally just take in numbers and turn them into dots. We need to do the stats *beforehand*.\n\nAs a taster, try running\n\n::: {#d14f3e96 .cell execution_count=30}\n``` {.python .cell-code}\navg_height_by_age.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](data_processing_files/figure-html/cell-31-output-1.png){width=575 height=429}\n:::\n:::\n\n\n## Exporting results\n\nThe last step in the process is saving the data. Let's say we want to take that final dataframe and export it to a csv. That's what the `df.to_csv()` method is for\n\n::: {#a9194888 .cell execution_count=31}\n``` {.python .cell-code}\navg_height_by_age.to_csv(\"data/avg_height_by_age.csv\")\n```\n:::\n\n\nThis will save the dataframe to a .csv file and place it in the data folder.\n\n## Activity 2\nNow that you've explored our \"Players\" dataset, why not try something larger? Download the [gapminder](data/gapminder.csv) dataset and explore. Try to use the following three techniques:\n\n1. Filter the data by a condition\n2. Aggregate over a particular variable\n3. Visualise your result\n\nFor step 3., you'll either want to reduce your data to two columns and use `.plot()`, or specify your axes with `.plot(x = \"x_variable\", y = \"y_variable\")`.\n\n\n:::{.callout-note collapse=\"true\"}\n# Solution\n\nOne possible solution with aggregation is\n\n::: {#86e874c4 .cell execution_count=32}\n``` {.python .cell-code}\n# Import the data\ngapminder = pd.read_csv(\"data/gapminder.csv\")\n\n# Select specific columns\nsubset = gapminder[[\"continent\", \"year\", \"pop\"]]\n\n# Max pop per continent of all time\ncontinents = subset.groupby(\"continent\").agg(\"max\")\n\ncontinents.plot(y = \"pop\", kind = \"bar\")\n```\n\n::: {.cell-output .cell-output-display}\n![](data_processing_files/figure-html/cell-33-output-1.png){width=571 height=492}\n:::\n:::\n\n\n:::\n\n## Conclusion\n\nToday we looked at a lot of Python features, so don't worry if they haven't all sunk in. Programming is best learned through practice, so keep at it! Here's a rundown of the concepts we covered\n\n| Concept | Desctiption |\n| --- | --- |\n| **Importing data** | The `pandas` package provides the `pd.read_...` functions to import data, like `pd.read_csv()`. Save it in a variable. | \n| **Accessing and filtering rows and columns** | Use square brackets for basic accessing and filtering, e.g. `df[\"column_a\"]` or `df[df[\"column_b\"] > 5]`. |\n| **Basic statistics** | A number of basic statistical functions can be applied to columns, e.g. `df[\"column_a\"].max()`. | \n| **Adding and removing columns** | Add columns by pretending they're already there and assigning into them, `df[\"new_column\"] = ... `, and remove them with `df = df.drop(columns = [...])`.\n| **Summaries and grouping** | Use `df.groupby(\"variable_a\").agg(\"statistic_b\")` to aggregate over your data. |\n| **Exporting** | Use `df.to_csv(\"file_path\")` to export your data | \n\n### Next session\n\nThanks for completing this introductory session to Python! You're now ready for our next session, [introductory visualisation](https://github.com/uqlibrary/technology-training/blob/master/Python/seaborn_intro/seaborn_intro.md), which looks at using the **seaborn** package for making visualisations.\n\nBefore you go, don't forget to check out the [Python User Group](https://uqpug.github.io/), a gathering of Python users at UQ.\n\nFinally, if you need any support or have any other questions, shoot us an email at [training@library.uq.edu.au](training@library.uq.edu.au).\n\n### Resources\n\n-   [Official pandas documentation](https://pandas.pydata.org/)\n    -   [Getting started](https://pandas.pydata.org/docs/getting_started/index.html)\n    -   [10 Minutes to pandas](https://pandas.pydata.org/docs/user_guide/10min.html)\n    -   [User guide](https://pandas.pydata.org/docs/user_guide/index.html)\n-   More visualisation modules:\n    -   [Altair](https://altair-viz.github.io/)\n    -   [Bokeh](https://docs.bokeh.org/en/latest/)\n    -   [Vega](https://vega.github.io/vega/)\n    -   [Matplotlib](https://matplotlib.org/)\n-   Our [compilation of useful Python links](https://github.com/uqlibrary/technology-training/blob/master/Python/useful_links.md)\n\n",
    "supporting": [
      "data_processing_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}