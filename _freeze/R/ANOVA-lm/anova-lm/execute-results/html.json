{
  "hash": "aa67ab66883f6016e0193714a36c582f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R statistics: ANOVA and linear regression\"\neditor: source\ndate: today\nauthor: UQ Library\n---\n\n## What are we going to learn?\n\nIn this hands-on session, you will use R, RStudio to run analysis of variance (ANOVA) and linear regression models.\n\nSpecifically, you will learn about:\n\n* data visualisation in base R and ggplot2\n* analysis of variance (ANOVA) in base R\n* linear models in base R\n* the tidy model approach\n\n## Keep in mind\n\n* Everything we write today will be saved in your project. Please remember to save it in your H drive or USB if you are using a Library computer.\n* R is case sensitive: it will tell the difference between uppercase and lowercase.\n* Respect the naming rules for objects (no spaces, does not start with a number...)\n\n### Help\n\nFor any dataset or function doubts that you might have, don't forget the three ways of getting help in RStudio:\n\n1. the shortcut command: `?functionname`\n2. the help function: `help(functionname)`\n3. the keyboard shortcut: press F1 with your cursor on a function name\n\n## Open RStudio\n\n* If you are using your own laptop please open RStudio\n  * If you need them, we have [installation instructions](R/installation.qmd)\n* Make sure you have a working internet connection\n* On Library computers (the first time takes about 10 min.): \n    * Log in with your UQ credentials (student account if you have two)\n    * Make sure you have a working internet connection\n    * Go to search at bottom left corner (magnifiying glass) \n    * Open the ZENworks application\n    * Look for RStudio\n    * Double click on RStudio which will install both R and RStudio\n\n## Setting up\n\n### Install and load required packages for first sections\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"readr\")\nlibrary(readr)        # data import\n# install.packages(\"dplyr\")\nlibrary(dplyr)        # data manipulation\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)      # data visualisation\n# install.packages(\"car\")\nlibrary(car)          # Companion to the book \"An R Companion to Applied Regression\"\n# install.packages(\"performance\")\nlibrary(performance)  # Assessment of regression models performance\n```\n:::\n\n\n> Remember to use <kbd>Ctrl</kbd>+<kbd>Enter</kbd> to execute a command from the script.\n\n### New project\n\n* Click the \"File\" menu button (top left corner), then \"New Project\"\n* Click \"New Directory\"\n* Click \"New Project\" (\"Empty project\" if you have an older version of RStudio)\n* In \"Directory name\", type the name of your project, e.g. \"r_statistics\"\n* Select the folder where to locate your project: for example, a `Documents/RProjects` folder, which you can create if it doesn't exist yet.\n* Click the \"Create Project\" button\n\n### Create a script\n\nWe will use a script to write code more comfortably.\n\n* Menu: Top left corner, click the green \"plus\" symbol, or press the shortcut (for Windows/Linux) <kbd>Ctrl</kbd>+Shift</kbd>+N</kbd> or (for Mac) <kbd>Cmd</kbd>+<kbd>Shift</kbd>+<kbd>N</kbd>. This will open an \"Untitled1\" file.\n* Go to \"File > Save\" or press (for Windows/Linux) <kbd>Ctrl</kbd>+<kbd>S</kbd> or (for Mac) <kbd>Cmd</kbd>+<kbd>S</kbd>. This will ask where you want to save your file and the name of the new file.\n* Call your file \"process.R\"\n\n### Introducing our data\n\nThe following section will be using data from [Constable (1993)](https://link.springer.com/article/10.1007/BF00349318) to explore how three different feeding regimes affect the size of sea urchins over time.\n\nSea urchins reportedly regulate their size according to the level of food available to regulate maintenance requirements. The paper examines whether a reduction in suture width (i.e., connection points between plates; see Fig. 1 from constable 1993) is the basis for shrinking due to low food conditions.\n\n![Figure 1 from Constable 1993 paper showing sea urchin plates and suture width](images/Constable-1993-fig1.PNG)\n\nThe [data in csv format](https://tidymodels.org/start/models/urchins.csv) is available from the tidymodels website.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurchins <- \n   # read in the data\n   read_csv(\"https://tidymodels.org/start/models/urchins.csv\") %>% \n   # change the names to be more descriptive\n   setNames(c(\"food_regime\", \"initial_volume\", \"width\")) %>% \n   # convert food_regime from character to factor, helpful for modeling\n   mutate(food_regime = factor(food_regime, \n                               levels = c(\"Initial\", \"Low\", \"High\")))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurchins # see the data as a tibble\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"food_regime\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"initial_volume\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"width\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Initial\",\"2\":\"3.5\",\"3\":\"0.010\"},{\"1\":\"Initial\",\"2\":\"5.0\",\"3\":\"0.020\"},{\"1\":\"Initial\",\"2\":\"8.0\",\"3\":\"0.061\"},{\"1\":\"Initial\",\"2\":\"10.0\",\"3\":\"0.051\"},{\"1\":\"Initial\",\"2\":\"13.0\",\"3\":\"0.041\"},{\"1\":\"Initial\",\"2\":\"13.0\",\"3\":\"0.061\"},{\"1\":\"Initial\",\"2\":\"15.0\",\"3\":\"0.041\"},{\"1\":\"Initial\",\"2\":\"15.0\",\"3\":\"0.071\"},{\"1\":\"Initial\",\"2\":\"16.0\",\"3\":\"0.092\"},{\"1\":\"Initial\",\"2\":\"17.0\",\"3\":\"0.051\"},{\"1\":\"Initial\",\"2\":\"19.0\",\"3\":\"0.051\"},{\"1\":\"Initial\",\"2\":\"20.0\",\"3\":\"0.082\"},{\"1\":\"Initial\",\"2\":\"21.0\",\"3\":\"0.102\"},{\"1\":\"Initial\",\"2\":\"21.0\",\"3\":\"0.092\"},{\"1\":\"Initial\",\"2\":\"24.0\",\"3\":\"0.051\"},{\"1\":\"Initial\",\"2\":\"24.0\",\"3\":\"0.061\"},{\"1\":\"Initial\",\"2\":\"24.0\",\"3\":\"0.082\"},{\"1\":\"Initial\",\"2\":\"28.0\",\"3\":\"0.071\"},{\"1\":\"Initial\",\"2\":\"29.0\",\"3\":\"0.071\"},{\"1\":\"Initial\",\"2\":\"35.0\",\"3\":\"0.082\"},{\"1\":\"Initial\",\"2\":\"36.0\",\"3\":\"0.061\"},{\"1\":\"Initial\",\"2\":\"39.0\",\"3\":\"0.082\"},{\"1\":\"Initial\",\"2\":\"39.0\",\"3\":\"0.112\"},{\"1\":\"Initial\",\"2\":\"44.0\",\"3\":\"0.102\"},{\"1\":\"Low\",\"2\":\"5.0\",\"3\":\"0.041\"},{\"1\":\"Low\",\"2\":\"8.0\",\"3\":\"0.031\"},{\"1\":\"Low\",\"2\":\"8.5\",\"3\":\"0.041\"},{\"1\":\"Low\",\"2\":\"11.5\",\"3\":\"0.082\"},{\"1\":\"Low\",\"2\":\"10.0\",\"3\":\"0.071\"},{\"1\":\"Low\",\"2\":\"14.0\",\"3\":\"0.051\"},{\"1\":\"Low\",\"2\":\"15.0\",\"3\":\"0.061\"},{\"1\":\"Low\",\"2\":\"15.5\",\"3\":\"0.082\"},{\"1\":\"Low\",\"2\":\"18.0\",\"3\":\"0.061\"},{\"1\":\"Low\",\"2\":\"18.0\",\"3\":\"0.061\"},{\"1\":\"Low\",\"2\":\"18.0\",\"3\":\"0.071\"},{\"1\":\"Low\",\"2\":\"22.0\",\"3\":\"0.041\"},{\"1\":\"Low\",\"2\":\"21.5\",\"3\":\"0.061\"},{\"1\":\"Low\",\"2\":\"20.5\",\"3\":\"0.061\"},{\"1\":\"Low\",\"2\":\"25.0\",\"3\":\"0.082\"},{\"1\":\"Low\",\"2\":\"26.0\",\"3\":\"0.061\"},{\"1\":\"Low\",\"2\":\"38.0\",\"3\":\"0.071\"},{\"1\":\"Low\",\"2\":\"41.0\",\"3\":\"0.082\"},{\"1\":\"Low\",\"2\":\"41.0\",\"3\":\"0.061\"},{\"1\":\"Low\",\"2\":\"43.0\",\"3\":\"0.061\"},{\"1\":\"Low\",\"2\":\"45.0\",\"3\":\"0.071\"},{\"1\":\"High\",\"2\":\"7.5\",\"3\":\"0.051\"},{\"1\":\"High\",\"2\":\"9.5\",\"3\":\"0.051\"},{\"1\":\"High\",\"2\":\"9.0\",\"3\":\"0.082\"},{\"1\":\"High\",\"2\":\"9.0\",\"3\":\"0.092\"},{\"1\":\"High\",\"2\":\"12.0\",\"3\":\"0.092\"},{\"1\":\"High\",\"2\":\"13.0\",\"3\":\"0.061\"},{\"1\":\"High\",\"2\":\"14.5\",\"3\":\"0.051\"},{\"1\":\"High\",\"2\":\"15.0\",\"3\":\"0.102\"},{\"1\":\"High\",\"2\":\"13.0\",\"3\":\"0.112\"},{\"1\":\"High\",\"2\":\"11.5\",\"3\":\"0.071\"},{\"1\":\"High\",\"2\":\"14.0\",\"3\":\"0.071\"},{\"1\":\"High\",\"2\":\"14.0\",\"3\":\"0.051\"},{\"1\":\"High\",\"2\":\"15.5\",\"3\":\"0.082\"},{\"1\":\"High\",\"2\":\"15.0\",\"3\":\"0.092\"},{\"1\":\"High\",\"2\":\"17.5\",\"3\":\"0.102\"},{\"1\":\"High\",\"2\":\"19.0\",\"3\":\"0.122\"},{\"1\":\"High\",\"2\":\"19.0\",\"3\":\"0.102\"},{\"1\":\"High\",\"2\":\"19.5\",\"3\":\"0.163\"},{\"1\":\"High\",\"2\":\"20.0\",\"3\":\"0.051\"},{\"1\":\"High\",\"2\":\"23.5\",\"3\":\"0.112\"},{\"1\":\"High\",\"2\":\"30.0\",\"3\":\"0.153\"},{\"1\":\"High\",\"2\":\"26.0\",\"3\":\"0.082\"},{\"1\":\"High\",\"2\":\"29.0\",\"3\":\"0.122\"},{\"1\":\"High\",\"2\":\"39.0\",\"3\":\"0.102\"},{\"1\":\"Low\",\"2\":\"47.5\",\"3\":\"0.041\"},{\"1\":\"Low\",\"2\":\"46.5\",\"3\":\"0.061\"},{\"1\":\"Low\",\"2\":\"11.5\",\"3\":\"0.031\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWe have 72 urchins with data on:\n\n* experimental feeding regime group with 3 levels (Initial, Low, or High)\n* size in milliliters at the start of the experiment (initial_volume)\n* suture width in millimeters at the end of the experiment (width, see Fig. 1)\n\n## Statistics in R using base and stats\n\n### Visualise the data \n\nUse a boxplot to visualize width versus `food_regime` as a factor and a scatterplot for width versus `initial_volume` as a continuous variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(width ~ food_regime, data = urchins)\n```\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/initial-plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(width ~ initial_volume, data = urchins)\n```\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/initial-plots-2.png){width=672}\n:::\n:::\n\n\nWe can see that there are some relationships between the response variable (width) and our two covariates (food_regime and initial volume). But what about the interaction between the two covariates?\n\n**Challenge 1 - Use ggplot2 to make a plot visualising the interaction between our two variables. Add a trendline to the data.**\n\n> Hint: think about grouping and coloring.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(urchins,\n       aes(x = initial_volume,\n           y = width,\n           col = food_regime)) +\n   geom_point() +\n   geom_smooth(method = \"lm\", se = FALSE) # add a linear trend line without a confidence interval\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/ggplot2-scatter-1.png){width=672}\n:::\n:::\n\n\nUrchins that were larger in volume at the start of the experiment tended to have wider sutures at the end. Slopes of the lines look different so this effect may depend on the feeding regime indicating we should include an interaction term.\n\n### Analysis of Variance (ANOVA)\n\nInformation in this section was taken from [rpubs.com](https://rpubs.com/tmcurley/twowayanova) and [Data Analysis in R Ch 7](https://bookdown.org/steve_midway/DAR/understanding-anova-in-r.html#multiple-comparisons).\n\nWe can do an ANOVA with the `aov()` function to test for differences in sea urchin suture width between our groups. We are technically running and **analysis of covariance (ANCOVA)** as we have both a continuous and a categorical variable. ANOVAs are for categorical variables and we will see that some of the *post-hoc* tests are not amenable to continuous variables.\n\n>`aov()` uses the model formula `response variable ~ covariate1 + covariate2`. The * denotes the inclusion of both main effects and interactions which we have done below. The formula below is equivalent to `reponse ~ covar1 + covar2 + covar1:covar2` i.e., the main effect of covar1 and covar2, and the interaction between the two.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naov_urch <- aov(width ~ food_regime * initial_volume, \n                data = urchins)\nsummary(aov_urch)  # print the summary statistics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                           Df   Sum Sq  Mean Sq F value   Pr(>F)    \nfood_regime                 2 0.012380 0.006190  13.832 9.62e-06 ***\ninitial_volume              1 0.008396 0.008396  18.762 5.15e-05 ***\nfood_regime:initial_volume  2 0.004609 0.002304   5.149  0.00835 ** \nResiduals                  66 0.029536 0.000448                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\nBoth the main effects and interaction are significant (p < 0.05) indicating a significant interactive effect between food regime and initial volume on urchin suture width. We need to do a pairwise-comparison to find out which factor levels and combination of the two covariates have the largest effect on width.\n\n#### Pair-wise comparison\n\nRun a **Tukey's Honestly Significant Difference (HSD)** test - note it does not work for non-factors as per the warning message.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTukeyHSD(aov_urch)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in replications(paste(\"~\", xx), data = mf): non-factors ignored:\ninitial_volume\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in replications(paste(\"~\", xx), data = mf): non-factors ignored:\nfood_regime, initial_volume\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in TukeyHSD.aov(aov_urch): 'which' specified some non-factors which\nwill be dropped\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = width ~ food_regime * initial_volume, data = urchins)\n\n$food_regime\n                     diff          lwr         upr     p adj\nLow-Initial  -0.006791667 -0.021433881 0.007850548 0.5100502\nHigh-Initial  0.023791667  0.009149452 0.038433881 0.0006687\nHigh-Low      0.030583333  0.015941119 0.045225548 0.0000129\n```\n\n\n:::\n:::\n\n\nThe comparison between High-Initial and High-Low food regimes are significant (p < 0.05). \n\n#### Checking the model \n\nWe also want to check that our model is a good fit and does not violate any ANOVA **assumptions**:\n\n1. Data are independent and normally distributed.\n2. The residuals from the data are normally distributed (homogeneity of variance).\n3. The variances of the sampled populations are equal. \n\n##### Normal distribution\n\n**Challenge 2 - Use a histogram and quantile-quantile (QQ) plots to visually check data are normally distributed**.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(urchins$width)\n```\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/normality-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# run the two together to combine them\nqqnorm(urchins$width)\nqqline(urchins$width)\n```\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/normality-2.png){width=672}\n:::\n:::\n\n\nQQ plots show the actual data vs their theoretical quantiles (i.e. the quantiles if the data was normally distributed). If the data was normally distributed, the points would follow closely the diagonal.\n\nYou could also run a Shapiro-Wilk test on the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(urchins$width)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  urchins$width\nW = 0.95726, p-value = 0.01552\n```\n\n\n:::\n:::\n\n\nThe p-value is less than 0.05 so the data are significantly different from a normal distribution.\n\n##### Homogeneity of variance\n\nWe plot the model's residuals (difference between observed and predicted values) versus the fitted values to check for homogeneity of variance - we do not want too much deviation from 0. (The red line is the average of the values.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(aov_urch, 1) # only plot first of 4 plots\n```\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/residuals-1.png){width=672}\n:::\n:::\n\n\nWe can also plot the predicted values from the model with the actual values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(predict(aov_urch) ~ urchins$width)\nabline(0, 1, col = \"red\") # plot a red line with intercept of 0 and slope of 1\n```\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/predicted-1.png){width=672}\n:::\n:::\n\n\nThis QQ plot show the residuals vs their theoretical quantiles (i.e. the quantiles if the data was normally distributed). If the residuals were normally distributed, they would follow closely the diagonal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(aov_urch, 2)\n```\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/qqplot-1.png){width=672}\n:::\n:::\n\n\nTo check the normality of residuals, we can also run a Shapiro-Wilk test on residuals:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(resid(aov_urch))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  resid(aov_urch)\nW = 0.98456, p-value = 0.5244\n```\n\n\n:::\n:::\n\n\nThe residuals fall on the Normal Q-Q plot diagonal and the Shapiro-Wilk result is non-significant (p > 0.05), which means we can't reject the hypothesis that the data comes from a population with a normal distribution.\n\nAnother way to check for homogeneity of variance is by using Levene's test.\n\n**Challenge 3 - use the help documentation for `leveneTest()` from the `car` package to check homogeneity of variance on `food_regime`.**\n\n> Again, only works for factor groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleveneTest(width ~ food_regime, data = urchins)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Df\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"F value\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Pr(>F)\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2\",\"2\":\"4.422386\",\"3\":\"0.01559113\",\"_rn_\":\"group\"},{\"1\":\"69\",\"2\":\"NA\",\"3\":\"NA\",\"_rn_\":\"\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nThe Levene's Test is significant for `food_regime`, which is not what we were hoping for: it means the assumption of homogeneity of variance is not met. There are a few options to deal with this. You can ignore this violation based on your own *a priori* knowledge of the distribution of the population being samples, drop the p-value significance, or use a different test.\n\n### Linear Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_urch <- lm(width ~ food_regime * initial_volume, \n              data = urchins)\nsummary(lm_urch)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = width ~ food_regime * initial_volume, data = urchins)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.045133 -0.013639  0.001111  0.013226  0.067907 \n\nCoefficients:\n                                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                     0.0331216  0.0096186   3.443 0.001002 ** \nfood_regimeLow                  0.0197824  0.0129883   1.523 0.132514    \nfood_regimeHigh                 0.0214111  0.0145318   1.473 0.145397    \ninitial_volume                  0.0015546  0.0003978   3.908 0.000222 ***\nfood_regimeLow:initial_volume  -0.0012594  0.0005102  -2.469 0.016164 *  \nfood_regimeHigh:initial_volume  0.0005254  0.0007020   0.748 0.456836    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02115 on 66 degrees of freedom\nMultiple R-squared:  0.4622,\tAdjusted R-squared:  0.4215 \nF-statistic: 11.35 on 5 and 66 DF,  p-value: 6.424e-08\n```\n\n\n:::\n:::\n\n\nIn the output, we have the model call, residuals, and the coefficients. The first coefficient is the `(Intercept)` and you might notice the `food_regimeInitial` is missing. The function defaults to an effects parameterisation where the intercept is the reference or baseline of the categorical group - Initial in this case. \n\n>You can change the reference level of a factor using the `relevel()` function. \n\nThe estimates of the remaining group levels of `food_regime` represents the effect of being in that group. To calculate the group coefficients for all group levels you *add* the estimates for the level to the intercept (first group level) estimate. For example, the estimate for the 'Initial' feeding regime is 0.0331 and we add the estimate of 'Low' (0.0331 + 0.0197) to get the mean maximum size of 0.0528 mm for width.\n\nFor the continuous covariate, the estimate represents the change in the response variable for a unit increase in the covariate. For example, `initial_volume`'s estimate of 0.0015 represents a 0.0015 mm increase (the estimate is positive) in width per ml increase in urchin initial volume. \n\nWe can get ANOVA test statistics on our linear model using `anova()` in base or `Anova()` from the `car` package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(lm_urch)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Df\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Sum Sq\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Mean Sq\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"F value\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Pr(>F)\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2\",\"2\":\"0.012380083\",\"3\":\"0.0061900417\",\"4\":\"13.832142\",\"5\":\"9.616282e-06\",\"_rn_\":\"food_regime\"},{\"1\":\"1\",\"2\":\"0.008396235\",\"3\":\"0.0083962349\",\"4\":\"18.762057\",\"5\":\"5.153633e-05\",\"_rn_\":\"initial_volume\"},{\"1\":\"2\",\"2\":\"0.004608803\",\"3\":\"0.0023044014\",\"4\":\"5.149369\",\"5\":\"8.353667e-03\",\"_rn_\":\"food_regime:initial_volume\"},{\"1\":\"66\",\"2\":\"0.029535754\",\"3\":\"0.0004475114\",\"4\":\"NA\",\"5\":\"NA\",\"_rn_\":\"Residuals\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAnova(lm_urch)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Sum Sq\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Df\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"F value\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Pr(>F)\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.016865255\",\"2\":\"2\",\"3\":\"18.843380\",\"4\":\"3.358002e-07\",\"_rn_\":\"food_regime\"},{\"1\":\"0.008396235\",\"2\":\"1\",\"3\":\"18.762057\",\"4\":\"5.153633e-05\",\"_rn_\":\"initial_volume\"},{\"1\":\"0.004608803\",\"2\":\"2\",\"3\":\"5.149369\",\"4\":\"8.353667e-03\",\"_rn_\":\"food_regime:initial_volume\"},{\"1\":\"0.029535754\",\"2\":\"66\",\"3\":\"NA\",\"4\":\"NA\",\"_rn_\":\"Residuals\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nThese are effectively the same as the `aov()` model we ran before. \n\n>**Note**: The statistics outputs are the same comparing the `aov()` and `anova()` models while the `Anova()` model is **not** exactly the same. The `Anova()` output tells us it was a Type II test and the `aov()` documentation says it is only for *balanced* designs which means the Type 1 test is applied (see [here](https://bookdown.org/ndphillips/YaRrr/type-i-type-ii-and-type-iii-anovas.html)). The type of test can be set for `Anova()` but not the others. Here, the overall take-away from the different ANOVA functions are comparable.\n\n**Challenge 4 - use the check_model() documentation to apply the function to our `lm_urch` model.**\n\nThe performance package has a handy function `check_model()` that will check several aspects of your model in one go:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(lm_urch)\n```\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/check-model-1.png){width=768}\n:::\n:::\n\n\n**Challenge 5 - conduct your own ANOVA or linear regression using the mgp dataset from {ggplot2}.**\n\n1. Test whether # of cylinders and/or engine displacement affect fuel efficiency. \n2. Make a plot to visualize the relationship.\n\n> **Hint**: Check out the documentation for the dataset `?mpg` to see the variables in the dataset. Are the variables the right data type? Suggest saving the dataset locally in your environment i.e., `mpg2 <- mpg` so you can change data types if necessary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg2 <-  mpg\nmpg2$cyl <- as.factor(mpg$cyl) # convert cyl from numeric to factor\n\n# base R ANOVA\naov_cars <- aov(hwy ~ cyl * displ, data = mpg2)\nsummary(aov_cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Df Sum Sq Mean Sq F value   Pr(>F)    \ncyl           3   4836  1612.1  142.69  < 2e-16 ***\ndispl         1    219   218.8   19.37 1.66e-05 ***\ncyl:displ     2    642   321.1   28.42 9.65e-12 ***\nResiduals   227   2565    11.3                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nTukeyHSD(aov_cars, \"cyl\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in replications(paste(\"~\", xx), data = mf): non-factors ignored: displ\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in replications(paste(\"~\", xx), data = mf): non-factors ignored: cyl,\ndispl\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = hwy ~ cyl * displ, data = mpg2)\n\n$cyl\n            diff        lwr       upr     p adj\n5-4  -0.05246914  -4.508182  4.403244 0.9999898\n6-4  -5.97968433  -7.355259 -4.604110 0.0000000\n8-4 -11.17389771 -12.593534 -9.754261 0.0000000\n6-5  -5.92721519 -10.385582 -1.468848 0.0038274\n8-5 -11.12142857 -15.593586 -6.649271 0.0000000\n8-6  -5.19421338  -6.622156 -3.766270 0.0000000\n```\n\n\n:::\n\n```{.r .cell-code}\n# linear model\nlm_cars <- lm(hwy ~ cyl * displ, data = mpg2)\nsummary(lm_cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = hwy ~ cyl * displ, data = mpg2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.6698 -2.0533 -0.4563  1.6948 13.1597 \n\nCoefficients: (1 not defined because of singularities)\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   46.601      2.586  18.018  < 2e-16 ***\ncyl5           2.887      1.773   1.628  0.10484    \ncyl6         -10.221      3.795  -2.693  0.00760 ** \ncyl8         -35.626      4.390  -8.114 3.07e-14 ***\ndispl         -8.295      1.193  -6.954 3.74e-11 ***\ncyl5:displ        NA         NA      NA       NA    \ncyl6:displ     4.318      1.440   2.998  0.00302 ** \ncyl8:displ     9.591      1.376   6.969 3.43e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.361 on 227 degrees of freedom\nMultiple R-squared:  0.6896,\tAdjusted R-squared:  0.6814 \nF-statistic: 84.05 on 6 and 227 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nAnova(lm_cars) # from the car package\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNote: model has aliased coefficients\n      sums of squares computed by model comparison\n```\n\n\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Sum Sq\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Df\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"F value\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Pr(>F)\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"207.1571\",\"2\":\"3\",\"3\":\"6.112251\",\"4\":\"5.138833e-04\",\"_rn_\":\"cyl\"},{\"1\":\"218.7795\",\"2\":\"1\",\"3\":\"19.365519\",\"4\":\"1.661112e-05\",\"_rn_\":\"displ\"},{\"1\":\"642.1682\",\"2\":\"2\",\"3\":\"28.421131\",\"4\":\"9.653581e-12\",\"_rn_\":\"cyl:displ\"},{\"1\":\"2564.5036\",\"2\":\"227\",\"3\":\"NA\",\"4\":\"NA\",\"_rn_\":\"Residuals\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg2,\n       aes(x = displ,\n           y = hwy,\n           color = cyl)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/plot-mpg-1.png){width=672}\n:::\n:::\n\n\n## The inbetween...\n\nBefore going into Tidymodels, it should be mentioned there are *many* excellent linear regression packages. To name a few:\n\n- nlme\n- lmer\n- lmerTest\n- glmmTMB\n- and more...\n\nThe packages vary in the methods, how to specify random factors, etc. The model outputs also tend to be not so friendly to export into a table and document.\n\n## Introducing Tidymodels\n\nLike the tidyverse package, the Tidymodels framework is a collection of packages for modeling and machine learning following the tidyverse principles.\n\n### Load more packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"tidymodels\")\nlibrary(tidymodels) # for parsnip package and rest of tidymodels\n# install.packages(\"dotwhisker\")\nlibrary(dotwhisker)# for visualizing regression results\n```\n:::\n\n\n### Build and fit a model\n\nLet's apply a standard two-way analysis of variance (ANOVA) model to the dataset as we did before. For this kind of model, ordinary least squares is a good initial approach.  \n\nFor Tidymodels, we need to specify the following:\n\n1. The *functional form* using the [parsnip package](https://parsnip.tidymodels.org/).\n2. The *method for fitting* the model by setting the **engine**. \n\nWe will specify the *functional form* or model type as [\"linear regression\"](https://parsnip.tidymodels.org/reference/linear_reg.html) as there is a numeric outcome with a linear slope and intercept. We can do this with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg()  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n\n\n:::\n:::\n\n\nOn its own, not that interesting. Next, we specify the method for *fitting* or training the model using the `set_engine()` function. The engine value is often a mash-up of the software that can be used to fit or train the model as well as the estimation method. For example, to use ordinary least squares, we can set the engine to be `lm`.\n\nThe [documentation page](https://parsnip.tidymodels.org/reference/linear_reg.html) for linear_reg() lists the possible engines. We'll save this model object as lm_mod.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_mod <- \nlinear_reg() %>% \n   set_engine(\"lm\")\n```\n:::\n\n\nNext, the model can be estimated or trained using the `fit()` function and the model formula we used for the ANOVA: \n\n`width ~ initial_volume * food_regime`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_fit <- \n   lm_mod %>% \n   fit(width ~ initial_volume * food_regime, data = urchins)\n\nlm_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\nstats::lm(formula = width ~ initial_volume * food_regime, data = data)\n\nCoefficients:\n                   (Intercept)                  initial_volume  \n                     0.0331216                       0.0015546  \n                food_regimeLow                 food_regimeHigh  \n                     0.0197824                       0.0214111  \n initial_volume:food_regimeLow  initial_volume:food_regimeHigh  \n                    -0.0012594                       0.0005254  \n```\n\n\n:::\n:::\n\n\nWe can use the `tidy()` function for our `lm` object to output model parameter estimates and their statistical properties. Similar to `summary()` but the results are more predictable and in a useful format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(lm_fit)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"term\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"estimate\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"std.error\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"statistic\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"p.value\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"(Intercept)\",\"2\":\"0.0331216259\",\"3\":\"0.0096186287\",\"4\":\"3.4434873\",\"5\":\"0.0010020308\"},{\"1\":\"initial_volume\",\"2\":\"0.0015546403\",\"3\":\"0.0003978337\",\"4\":\"3.9077643\",\"5\":\"0.0002220426\"},{\"1\":\"food_regimeLow\",\"2\":\"0.0197823628\",\"3\":\"0.0129883393\",\"4\":\"1.5230864\",\"5\":\"0.1325144691\"},{\"1\":\"food_regimeHigh\",\"2\":\"0.0214111044\",\"3\":\"0.0145317736\",\"4\":\"1.4733993\",\"5\":\"0.1453969848\"},{\"1\":\"initial_volume:food_regimeLow\",\"2\":\"-0.0012593696\",\"3\":\"0.0005101652\",\"4\":\"-2.4685525\",\"5\":\"0.0161637663\"},{\"1\":\"initial_volume:food_regimeHigh\",\"2\":\"0.0005253946\",\"3\":\"0.0007019580\",\"4\":\"0.7484702\",\"5\":\"0.4568356317\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nThis output can be used to generate a dot-and-whisker plot of our regression results using the `dotwhisker` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(lm_fit) %>% \n   dwplot(dot_args = list(size = 2, color = \"black\"),\n          whisker_args = list(color = \"black\"),\n          vline = geom_vline(xintercept = 0, \n                             color = \"grey50\",\n                             linetype = 2))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\nℹ The deprecated feature was likely used in the dotwhisker package.\n  Please report the issue at <https://github.com/fsolt/dotwhisker/issues>.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/dotwhisker-plot-1.png){width=672}\n:::\n:::\n\n\n\n## Use a model to predict\n\nSay that it would be interesting to make a plot of the mean body size for urchins that started the experiment with an initial volume of 20 ml. \n\nFirst, lets make some new example data to predict for our graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_points <- expand.grid(initial_volume = 20,\n                          food_regime = c(\"Initial\", \"Low\", \"High\"))\nnew_points\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"initial_volume\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"food_regime\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"20\",\"2\":\"Initial\"},{\"1\":\"20\",\"2\":\"Low\"},{\"1\":\"20\",\"2\":\"High\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWe can then use the `predict()` function to find the mean values at 20 ml initial volume. \n\nWith tidymodels, the types of predicted values are standardized so that we can use the same syntax to get these values.\n\nLet's generate the mean suture width values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_pred <- predict(lm_fit, new_data = new_points)\nmean_pred\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".pred\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.06421443\"},{\"1\":\"0.05880940\"},{\"1\":\"0.09613343\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWhen making predictions, the tidymodels convention is to always produce a tibble of results with standardized column names. This makes it easy to combine the original data and the predictions in a usable format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconf_int_pred <- predict(lm_fit, \n                         new_data = new_points,\n                         type = \"conf_int\")\nconf_int_pred\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".pred_lower\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\".pred_upper\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.05549934\",\"2\":\"0.07292952\"},{\"1\":\"0.04986251\",\"2\":\"0.06775629\"},{\"1\":\"0.08696233\",\"2\":\"0.10530453\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# now combine:\nplot_data <- \n   new_points %>% \n   bind_cols(mean_pred, conf_int_pred)\n\nplot_data\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"initial_volume\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"food_regime\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\".pred\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\".pred_lower\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\".pred_upper\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"20\",\"2\":\"Initial\",\"3\":\"0.06421443\",\"4\":\"0.05549934\",\"5\":\"0.07292952\"},{\"1\":\"20\",\"2\":\"Low\",\"3\":\"0.05880940\",\"4\":\"0.04986251\",\"5\":\"0.06775629\"},{\"1\":\"20\",\"2\":\"High\",\"3\":\"0.09613343\",\"4\":\"0.08696233\",\"5\":\"0.10530453\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# and plot:\nggplot(plot_data, \n       aes(x = food_regime)) +\n   geom_point(aes(y = .pred)) +\n   geom_errorbar(aes(ymin = .pred_lower,\n                     ymax = .pred_upper),\n                 width = .2) +\n   labs(y = \"urchin size\")\n```\n\n::: {.cell-output-display}\n![](anova-lm_files/figure-html/combine-1.png){width=672}\n:::\n:::\n\n\nThere is also an example of a *Bayesian* model in the tidymodels article I have not included here.\n\n## Close project\n\nClosing RStudio will ask you if you want to save your workspace and scripts.\nSaving your workspace is usually not recommended if you have all the necessary commands in your script.\n\n## Useful links\n\n* For statistical analysis in R:\n  + Steve Midway's [Data Analysis in R Part II Analysis](https://bookdown.org/steve_midway/DAR/part-ii-analysis.html)\n  + Jeffrey A. Walker's [Applied Statistics for Experiemental Biology](https://middleprofessor.github.io/benchbiostats/)\n  + Chester Ismay and Albert Y. Kim's [ModernDive Statistical Inference via Data Science](https://moderndive.com/)\n* For tidymodels:\n  + [tidymodels website](https://www.tidymodels.org/)\n* Our compilation of [general R resources](https://github.com/uqlibrary/technology-training/blob/master/R/usefullinks.md)\n\n## Licence\n\nBecause it draws heavily from the [CC BY-SA-licensed](https://github.com/tidymodels/tidymodels.org?tab=readme-ov-file#tidymodelsorg) [Tidymodels article titled \"Build a model\"](https://www.tidymodels.org/start/models/), this material is also released under a [CC BY-SA 4.0 licence](https://creativecommons.org/licenses/by-sa/4.0/).",
    "supporting": [
      "anova-lm_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}