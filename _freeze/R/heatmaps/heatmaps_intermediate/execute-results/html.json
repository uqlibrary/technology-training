{
  "hash": "e1541166970ca230d2420924259f0e37",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R data visualisation: heatmaps\"\neditor: source\ndate: today\nauthor: UQ Library\n---\n\n\n\n\nA **heatmap** is a way of visualising a table of numbers, where you substitute the numbers with colored cells. It’s useful for finding highs and lows, and see patterns more clearly. There are many functions available in R to create this kind of visualisations, but we will focus in four options here.\n\n## What are we going to learn?\n\nDuring this session, you will:\n\n-   Learn how to produce a simple heatmap with the base function `heatmap()`;\n-   Learn about alternatives to produce more complex heatmaps, like `heatmap.2()` and `pheatmap()`;\n-   Learn how to produce a rudimentary heatmap with the ggplot2 package.\n\n## Disclaimer\n\nWe will assume you are an R intermediate user and that you have used RStudio before.\n\n## Open RStudio\n\n> [Installation instructions](https://github.com/uqlibrary/technology-training/blob/master/R/Installation.md) are available if you don't have R and RStudio installed already.\n\n-   On your own computer:\n    -   Open RStudio\n    -   Make sure you have a working Internet connection\n-   On Library computers:\n    -   Log in with your UQ username and password\n    -   Make sure you have a working Internet connection\n    -   Open the ZENworks application\n    -   Look for the letter \"R\"\n    -   Double click on RStudio which will install both R and RStudio\n\n## Essential shortcuts\n\n-   function or dataset help: press <kbd>F1</kbd> with your cursor anywhere in a function name.\n-   execute from script: <kbd>Ctrl</kbd> + <kbd>Enter</kbd>\n-   assignment operator (`<-`): <kbd>Alt</kbd> + <kbd>-</kbd>\n\n## R Project\n\nEverything we write today will be saved in your script, so please remember to create your project on your H drive (or USB stick) if you use the University computers, so you can go back to it after the session.\n\n-   Create a new project:\n    -   Click the \"New project\" menu icon\n    -   Click \"New Directory\"\n    -   Click \"New Project\"\n    -   In \"Directory name\", type the name of your project, e.g. \"heatmaps\"\n    -   Browse and select a folder where to locate your project (for example, an \"r_projects\" directory where all your projects live)\n    -   Click the \"Create Project\" button\n-   Create new folders with the following commands:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"scripts\")\ndir.create(\"plots\")\n```\n:::\n\n\n\n\n-   Create a new R script called \"heatmaps.R\" in the \"scripts\" folder:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.create(\"scripts/heatmaps.R\")\nfile.edit(\"scripts/heatmaps.R\")\n```\n:::\n\n\n\n\n## Method 1: the base `heatmap()` function\n\nAs a first example, we will use a built-in dataset called `mtcars`.\n\n### Explore the data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mtcars\ndim(mtcars)\nstr(mtcars)\nhead(mtcars)\nView(mtcars)\n```\n:::\n\n\n\n\n### Prepare data\n\nThe data is a dataframe, but it has to be a **numeric matrix** to make your heatmap. Dataframes can contain variables with different data classes, whereas matrices only contain one data class.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars_matrix <- data.matrix(mtcars) # convert a DF to a numeric matrix\nclass(mtcars_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n\n\n\n### Visualise\n\nWe are now going to use the `heatmap()` function to create our first heatmap:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap(mtcars_matrix)\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap-1.png){width=672}\n:::\n:::\n\n\n\n\nDoes it look like what you expected?\n\nLook at the function's help page, and read the description of the `scale` argument in particular:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?heatmap\n```\n:::\n\n\n\n\n**Scale** is important: the values should be centered and scaled in either rows or columns. In our case, we want to visualise highs and lows in each variable, which are in columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap(mtcars_matrix, scale = \"column\")\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap-scale-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can now see the high (red) and low (white) values in each variable, and visualise groups of similar cars.\n\n### Colours\n\nWith versions of R up to 3.5, the default heatmap palette was `heat.colors()`, which is not the most intuitive as it goes from red for low values to white for high values.\n\nSince R 3.6, the default palette is \"YlOrRd\", which stand for \"Yellow, Orange, Red\".\n\nYou can however replace the default palette and use different colours, and different numbers of levels. For example, in the palette function `cm.colors(n)`, n is the number of levels (\\>= 1) contained in the cyan-to-magenta palette. This function can be used in the `col` argument:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap(mtcars_matrix,\n        scale = \"column\",\n        col = cm.colors(n = 15))\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap-cm-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can try other functions, like `terrain.colors()` or `hcl.colors()` (in R \\> 3.6), and you can reverse them with the `rev = TRUE` argument.\n\n### Challenge 1: Remove dendrograms\n\nDoes it make sense to have both columns and rows for this dataset?\n\nLook at the help documentation for `heatmap` to see if the dendrograms can be removed for rows and/or columns.\n\n> Hint: see the `Rowv` and `Colv` arguments.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap(mtcars_matrix,\n        scale = \"column\",\n        col = cm.colors(15),\n        Colv = NA)\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap-dendro-1.png){width=672}\n:::\n:::\n\n\n\n\n> If dendrograms are removed, the data won't be reorganised according to the clustering method.\n\n### Clean the environment\n\nWe can start with a fresh environment, using:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n\n\n## Method 2: `gplots::heatmap.2()`\n\nIf you don't have the gplots package yet, use `install.packages(\"gplots\")`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gplots)\n```\n:::\n\n\n\n\nThis gplots heatmap function provides a number of extensions to the standard R heatmap function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?heatmap.2\n```\n:::\n\n\n\n\n### Protein data example\n\nThis dataset contains observations for 63 proteins in three control experiments and three experiments where cells are treated with a growth factor. We need to import it from the web:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrawdata <- read.csv(\"https://raw.githubusercontent.com/ab604/heatmap/master/leanne_testdata.csv\")\n```\n:::\n\n\n\n\nWe can then explore the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(rawdata)\nhead(rawdata)\nView(rawdata)\n```\n:::\n\n\n\n\nIt’s important to note that a lot of visualisations involve gathering and preparing data. Rarely do you get data exactly how you need it, so you should expect to do some data munging before producing the visuals.\n\nHere, we need to remove useless columns, and we also want to rename them for clarity.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprot_data <- rawdata[ , 2:7] # remove superfluous columns\ncolnames(prot_data) <- c(paste(\"Control\", 1:3, sep = \"_\"), \n                       paste(\"Treatment\", 1:3, sep = \"_\"))\n```\n:::\n\n\n\n\nWe also need to convert the dataframe to a matrix, just like in our first example.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(rawdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprot_matrix <- data.matrix(prot_data)\nclass(prot_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n\n\n\nWe can now visualise the data with `heatmap.2()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap.2(prot_matrix)\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap2-1.png){width=672}\n:::\n:::\n\n\n\n\n> The `scale` argument in `heatmap.2()` is by default set to `\"none\"`!\n\nFor a more informative visualisation, we can scale the data for each protein:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap.2(prot_matrix,\n          scale = \"row\")\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap2-scale-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can now see each protein's response to treatments.\n\n> Notice how the visualisation is more readable, but the clustering does not take into account the scaling? That's because the scaling is done *after* the clustering.\n\nWith `heatmap.2()`, if we want to cluster rows according to the scaled data, we have to scale it *prior* to generating the heatmap.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?scale\n```\n:::\n\n\n\n\n`scale()` is a function that centres and scales the *columns* of a numeric matrix. We **transpose** the matrix with `t()` to then **centre and scale** each protein's data (i.e. the rows) with `scale()`. Finally, we transpose the data back to the original form.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprot_scaled <- prot_matrix |> \n  t() |> \n  scale() |> \n  t()\n```\n:::\n\n\n\n\nLet's visualise it once more:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap.2(prot_scaled)\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap2-scaled-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can now see clear groups.\n\n### More control over colours\n\nLet's create a new palette function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_palette <- colorRampPalette(c(\"blue\",\n                                 \"white\",\n                                 \"red\")) # from low to high\n```\n:::\n\n\n\n\nNow, we can use it and further customise our heatmap:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap.2(prot_scaled,\n          trace = \"none\",               # turn off trace lines from heatmap\n          col = my_palette(25))         # use my colour scheme with 25 levels\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap2-colour-1.png){width=672}\n:::\n:::\n\n\n\n\nFix a few things and add a few extras:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap.2(prot_scaled,\n          Colv = FALSE,               # no clustering on columns\n          trace = \"none\",\n          col = my_palette(25),\n          main = \"Protein abundance\", # add title\n          margins = c(6, 3),          # more space from border\n          keysize = 2,                # make key and histogram bigger\n          cexRow = 0.4,               # amend row font\n          cexCol = 0.8)               # amend column font\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in heatmap.2(prot_scaled, Colv = FALSE, trace = \"none\", col =\nmy_palette(25), : Discrepancy: Colv is FALSE, while dendrogram is `both'.\nOmitting column dendogram.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap2-custom-1.png){width=672}\n:::\n:::\n\n\n\n\nTo suppress the warning, you can also specify which dendrogram you want to show:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap.2(prot_scaled,\n          Colv = FALSE,\n          dendrogram = \"row\",     # only show the row dendrogram\n          trace = \"none\",\n          col = my_palette(25),\n          main = \"Protein abundance\",\n          margins = c(6, 3),\n          keysize = 2,\n          cexRow = 0.4,\n          cexCol = 0.8)\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/heatmap2-dendro-1.png){width=672}\n:::\n:::\n\n\n\n\nClean up the environment with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n\n\n## Method 3: `pheatmap::pheatmap()`\n\nIf you don't have it already, install pheatmap with `install.packages(\"pheatmap\")`.\n\nLoad the required package with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pheatmap)\n```\n:::\n\n\n\n\nHow does `pheatmap()` (which stands for \"pretty heatmap\") differ from other functions?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?pheatmap\n```\n:::\n\n\n\n\n> A function to draw clustered heatmaps where one has better control over some graphical parameters such as cell size, etc.\n\nCreate a data matrix from pseudo-random numbers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- matrix(rnorm(25), nrow = 5)\ncolnames(d) <- paste0(\"Treatment\", 1:5)\nrownames(d) <- paste0(\"Gene\", 1:5)\n```\n:::\n\n\n\n\nTry it out:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheatmap(d)\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/ph-1.png){width=672}\n:::\n:::\n\n\n\n\nBy default, pheatmap adapts to the available space. You can however fix the size of the cells, for example to squares:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheatmap(d, \n         main = \"Pretty heatmap\",\n         cellwidth =  30,\n         cellheight = 30,\n         fontsize = 10,\n         display_numbers = TRUE)\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/ph-custom-1.png){width=672}\n:::\n:::\n\n\n\n\n> By default, the `scale` argument is set to `\"none\"`. If you do scale the data, the clustering will take it into account (i.e. the clustering happens *after* the scaling).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheatmap(d, \n         main = \"Pretty heatmap\",\n         cellwidth =  50,\n         cellheight = 30,\n         fontsize = 12,\n         display_numbers = TRUE,\n         scale = \"row\")\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/ph-scale-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can save your plot with an extra argument:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheatmap(d, \n         main = \"Pretty heatmap\",\n         cellwidth =  50,\n         cellheight = 30,\n         fontsize = 12,\n         filename = \"plots/heatmap.pdf\")\n```\n:::\n\n\n\n\nClean up your environment with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n\n\n## Summary of first three methods\n\nThe first three methods differ in their default settings and in the order of the processing steps:\n\n    stats::heatmap():     scale (row) -> cluster -> colour\n    gplots::heatmap.2():  cluster -> scale (none) -> colour\n    pheatmap::pheatmap(): scale (none) -> cluster -> colour\n\n## Method 4: a dataframe in ggplot2\n\nIf you want to stick to the ggplot2 package for all your data visualisation, there is a way to create a simple heatmap (without clustering). So far, we have seen methods that make use of data matrices; however, ggplot2 deals with dataframes that contain \"tidy data\".\n\nIf you don't have ggplot2 installed on your system, you can do that with the command `install.packages(\"ggplot2\")`.\n\nLoad the necessary library:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\n\nWe are using a built-in dataset about oesophageal cancer occurrence: `esoph`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?esoph\n```\n:::\n\n\n\n\nLet's subset the data we want to look at, i.e. only 55-64 year-olds:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesoph_sub <- subset(esoph, agegp == \"55-64\")\n```\n:::\n\n\n\n\nCreate a basic heatmap from the dataframe:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(esoph_sub, aes(x = alcgp,\n                      y = tobgp,\n                      fill = ncases / (ncases + ncontrols))) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\",\n                      high = \"darkred\") +\n  theme_minimal() +\n  labs(fill = \"Cancer freq.\",\n       x = \"Alcohol consumption\",\n       y = \"Tobacco consumption\")\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/gg-1.png){width=672}\n:::\n:::\n\n\n\n\nThis ggplot2 method does not allow to create dendrograms. However, other packages are based on ggplot2 and support dendrograms. (Search for \"heatmap\" in the [ggplot2 extension gallery](https://exts.ggplot2.tidyverse.org/gallery/).)\n\nClean up your environment with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n\n\n## (optional) Method 5: `ComplexHeatmap::Heatmap`\n\nThis extra method come from a different repository than the official CRAN repositories: the [Bioconductor](https://www.bioconductor.org) project.\n\nThe package we use is the ComplexHeatmap package, which is fully documented [here](https://jokergoo.github.io/ComplexHeatmap-reference/book/).\n\n*Step 1: install and load*\n\nBiocManager is used to install Bioconductor packages.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"BiocManager\")\n# BiocManager::install(\"ComplexHeatmap\")\nlibrary(ComplexHeatmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: grid\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n========================================\nComplexHeatmap version 2.24.0\nBioconductor page: http://bioconductor.org/packages/ComplexHeatmap/\nGithub page: https://github.com/jokergoo/ComplexHeatmap\nDocumentation: http://jokergoo.github.io/ComplexHeatmap-reference\n\nIf you use it in published research, please cite either one:\n- Gu, Z. Complex Heatmap Visualization. iMeta 2022.\n- Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional \n    genomic data. Bioinformatics 2016.\n\n\nThe new InteractiveComplexHeatmap package can directly export static \ncomplex heatmaps into an interactive Shiny app with zero effort. Have a try!\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(ComplexHeatmap))\n========================================\n! pheatmap() has been masked by ComplexHeatmap::pheatmap(). Most of the arguments\n   in the original pheatmap() are identically supported in the new function. You \n   can still use the original function by explicitly calling pheatmap::pheatmap().\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'ComplexHeatmap'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:pheatmap':\n\n    pheatmap\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(circlize) # for the colorRamp2() function\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n========================================\ncirclize version 0.4.16\nCRAN page: https://cran.r-project.org/package=circlize\nGithub page: https://github.com/jokergoo/circlize\nDocumentation: https://jokergoo.github.io/circlize_book/book/\n\nIf you use it in published research, please cite:\nGu, Z. circlize implements and enhances circular visualization\n  in R. Bioinformatics 2014.\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(circlize))\n========================================\n```\n\n\n:::\n:::\n\n\n\n\nHow is the `Heatmap()` function different to the base `heatmap()`?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?Heatmap\n```\n:::\n\n\n\n\n*Step 2: create and manipulate data*\n\nCreate a data matrix:\n\n> See this [StackOverflow article](https://stackoverflow.com/questions/13605271/reasons-for-using-the-set-seed-function) on the importance of setting a seed.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nmat <- cbind(rbind(matrix(rnorm(16, -1), 4),\n                   matrix(rnorm(32, 1), 8)),\n             rbind(matrix(rnorm(24, 1), 4),\n                   matrix(rnorm(48, -1), 8)))\n```\n:::\n\n\n\n\nPermute the rows and columns:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- mat[sample(nrow(mat),\n                  nrow(mat)),\n           sample(ncol(mat),\n                  ncol(mat))]\nrownames(mat) <- paste0(\"R\", 1:12)\ncolnames(mat) <- paste0(\"C\", 1:10)\n```\n:::\n\n\n\n\n*Step 3: make a heatmap*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHeatmap(mat)\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/ch-1.png){width=672}\n:::\n:::\n\n\n\n\nModify the colour and the labels, remove dendrograms (and don't cluster the data):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHeatmap(mat, \n        col = colorRamp2(c(-3, 0, 3),\n                         c(\"brown\", \"white\", \"yellow\")), \n        cluster_rows = FALSE, \n        cluster_columns = FALSE,\n        heatmap_legend_param = list(title = \"Values\"))\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/ch-custom-1.png){width=672}\n:::\n:::\n\n\n\n\nThe `cluster_` arguments can take external clustering information, which means you can use any type of clustering method.\n\nNow, let's see how this function deals with missing values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat_with_na <- mat\nmat_with_na[sample(c(TRUE, FALSE),\n                   nrow(mat)*ncol(mat),\n                   replace = TRUE,\n                   prob = c(1, 9))] <- NA\nHeatmap(mat_with_na, \n        col = topo.colors(100),\n        na_col = \"orange\", \n        clustering_distance_rows = \"pearson\",\n        heatmap_legend_param = list(title = \"Values\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NA exists in the matrix, calculating distance by removing NA values.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/ch-missing-1.png){width=672}\n:::\n:::\n\n\n\n\n`Heatmap()` automatically removes NA values to calculate the distance.\n\nWe can also reorganise dendrograms and labels:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHeatmap(mat, \n        name = \"abundance\", \n        row_names_side = \"left\", \n        row_dend_side = \"right\", \n        column_names_side = \"top\", \n        column_dend_side = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/ch-dendro-1.png){width=672}\n:::\n:::\n\n\n\n\nTo separate clusters, we can use the `km` argument, which allows k-means clustering on rows.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHeatmap(mat, \n        name = \"abundance\", \n        row_names_side = \"left\", \n        row_dend_side = \"right\", \n        column_names_side = \"top\", \n        column_dend_side = \"bottom\",\n        km = 2)\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/ch-km-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can add options, save the base plot as an object and then slightly modify if with the `draw()` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh1 <- Heatmap(mat, \n        name = \"abundance\", \n        col = topo.colors(50),\n        color_space = \"sRGB\",\n        row_dend_width = unit(1, \"cm\"),\n        column_dend_height = unit(1, \"cm\"),\n        row_dend_reorder = TRUE,\n        column_dend_reorder = TRUE,\n        row_names_gp = gpar(fontsize = 7),\n        column_names_gp = gpar(fontsize = 9),\n        column_names_max_height = unit(2, \"cm\"),\n        row_names_max_width = unit(9, \"cm\"),\n        column_title = \"This is a complex heatmap\")\ndraw(h1, heatmap_legend_side = \"left\")\n```\n\n::: {.cell-output-display}\n![](heatmaps_intermediate_files/figure-html/ch-draw-1.png){width=672}\n:::\n:::\n\n\n\n\nClean my environment with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n\n\n## Close R project\n\nWhen closing RStudio, you should be prompted to save your workspace. If your script contains all the steps required to generate your data and visualisations, it is best practice to not save your workspace: you can execute the whole script when you go back to your project.\n\n## Further resources\n\n-   More on R heatmaps:\n    - a more in-depth [example with pheatmap](https://slowkow.com/notes/pheatmap-tutorial/)\n    - [Leanne Wicken's dataset with heatmap.2 and an interactive heatmap with d3heatmap](https://rpubs.com/ab604/98032)\n    - the [R Graph Gallery of heatmaps](https://www.r-graph-gallery.com/heatmap)\n-   More heatmap packages:\n    - [Full reference on **ComplexHeatmap**](https://jokergoo.github.io/ComplexHeatmap-reference/book/)\n    - [**tidyHeatmap**](https://github.com/stemangiola/tidyHeatmap#tidyheatmap), built on ComplexHeatmap but for tidy data\n    - [**iheatmapr**](https://docs.ropensci.org/iheatmapr/), for richer interactive heatmaps\n    - Search for \"heatmap\" in the [ggplot2 extension gallery](https://exts.ggplot2.tidyverse.org/gallery/)\n-   Our [compilation of R resources](https://github.com/uqlibrary/technology-training/blob/master/R/usefullinks.md)\n",
    "supporting": [
      "heatmaps_intermediate_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}