{
  "hash": "9cfc2b35ed124eaaadc641165f599ec0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R ggplot2: introductory data visualisation\"\neditor: source\ndate: today\nauthor: UQ Library\n---\n\n\n\n## What are we going to learn?\n\nThis session is directed at R users (a beginner level is sufficient) who are new to the ggplot2 package.\n\nDuring this session, you will:\n\n* Have a visualisation package installed (ggplot2)\n* Learn how to explore data visually\n* Learn about the 3 essential ggplot2 components\n* Use different kinds of visualisations\n* Layer several visualisations\n* Learn how to customise a plot with colours, labels and themes.\n\n## Open RStudio\n\n* If you are using your own laptop please open RStudio\n    + If you need theme, we have [installation instruction](/R/Installation.md#r--rstudio-installation-instructions)\n    + Make sure you have a working Internet connection\n* On the Library computers (the first time takes about 10 min):\n    + Log in with your UQ username and password (use your student account if you have both a staff and student account)\n    + Make sure you have a working Internet connection\n    + Open the ZENworks application\n    + Look for RStudio\n    + Double-click on RStudio which will install both R and RStudio, and open RStudio\n    \n## Essential shortcuts\n\nRemember some of the most commonly used RStudio shortcuts:\n\n* function or dataset help: press <kbd>F1</kbd> with your cursor anywhere in a function name.\n* execute from script: <kbd>Ctrl</kbd> + <kbd>Enter</kbd>\n* assignment operator (`<-`): <kbd>Alt</kbd> + <kbd>-</kbd>\n\n## Installing ggplot2\n\nWe first need to make sure we have the **ggplot2 package** available on our computer. We can use the \"Install\" button in the \"Packages\" pane, or we can execute this command in the console: `install.packages(\"ggplot2\")`\n\nYou only need to install a package once, but you need to load it every time you start a new R session.\n\n## Setting up a project\n\n> Everything we write today will be saved in your R project. Please remember to save it on your H drive or USB if you are using a Library computer.\n\nLet's create a new **R project** to keep everything tidy:\n\n* Click the \"File\" menu button (top left corner), then \"New Project\"\n* Click \"New Directory\"\n* Click \"New Project\"\n* In \"Directory name\", type the name of your project, e.g. \"ggplot2_intro\"\n* Select the folder where to locate your project: e.g. a `Documents/RProjects` folder, which you can create if it doesn't exist yet.\n* Click the \"Create Project\" button\n* Create a folder to store our plots:\n    + `dir.create(\"plots\")`\n\nWe will write ggplot2 code more comfortably in a **script**:\n\n* Menu: Top left corner, click the green \"plus\" symbol, or press the shortcut (for Windows/Linux) <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>N</kbd> or (for Mac) <kbd>Cmd</kbd>+<kbd>Shift</kbd>+<kbd>N</kbd>. This will open an \"Untitled1\" file.\n* Go to \"File > Save\" or press (for Windows/Linux) <kbd>Ctrl</kbd>+<kbd>S</kbd> or (for Mac) <kbd>Cmd</kbd>+<kbd>S</kbd>. This will ask where you want to save your file and the name of the new file.\n* Call your file \"process.R\"\n\nWe can straight away **load the package** by adding this command to our script and executing it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\n> Remember to use <kbd>Ctrl</kbd>+<kbd>Enter</kbd> to execute a command from the script.\n\n## Finding help\n\nWe are going to work with different datasets that come with the ggplot2 package. For any dataset or function doubts that you might have, don't forget the two main ways to bring up a help page:\n\n1.  the command: `?functionname`\n1.  the keyboard shortcut: press <kbd>F1</kbd> after writing a function name\n\n### Introducing ggplot2\n\nThe R package ggplot2 was developed by Hadley Wickham with the objective of creating a grammar of graphics for categorical data (in 2007). It is based on the book _The Grammar of Graphics_ Developed by Leland Wilkinson (first edition published in 1999).\n\nIt is now part of the group of data science packages called Tidyverse.\n\n## The components of the Grammar of Graphics\n\nThe Grammar of Graphics is based on the idea that you can build every graph from the same few components.\n\nThe components are:\n\n* Data\n* Mapping\n* Statistics\n* Scales\n* Geometries\n* Facets\n* Coordinates\n* Theme\n\nIn this introductory session, we will mainly focus on the **data**, the **mapping**, the **statistics**, the **geometries** and the **theme**.\n\n## ggplot2's three essential components\n\nIn ggplot2, the 3 main components that we usually have to provide are:\n\n1. Where the **data** comes from,\n2. the **aesthetic mappings**, and\n3. a **geometry**.\n\nFor our first example, let's use the `msleep` dataset (from the ggplot2 package), which contains data about mammals' sleeping patterns.\n\n> You can find out about the dataset with `?msleep`.\n\nLet's start with specifying where the **data** comes from in the `ggplot()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = msleep)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nThis is not very interesting. We need to tell ggplot2 *what* we want to visualise, by **mapping** *aesthetic elements* (like our axes) to *variables* from the data. We want to visualise how common different conservations statuses are, so let's associate the right variable to the x axis:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = msleep,\n       mapping = aes(x = conservation))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nggplot2 has done what we asked it to do: the conservation variable is on the x axis. But nothing is shown on the plot area, because we haven't defined *how* to represent the data, with a `geometry_*` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = msleep,\n       mapping = aes(x = conservation)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nNow we have a useful plot: we can see that a lot of animals in this dataset don't have a conservation status, and that \"least concern\" is the next most common value.\n\nWe can see our three essential elements in the code:\n\n1. the **data** comes from the `msleep` object;\n1. the variable `conservation` is **mapped to the aesthetic** `x` (i.e. the x axis);\n1. the **geometry** is `\"bar\"`, for \"bar chart\".\n\nHere, we don't need to specify what variable is associated to the y axis, as the \"bar\" geometry automatically does a count of the different values in the `conservation` variable. That is what **statistics** are applied automatically to the data.\n\n> In ggplot2, each geometry has default statistics, so we often don't need to specify which stats we want to use. We could use a `stat_*()` function instead of a `geom_*()` function, but most people start with the geometry (and let ggplot2 pick the default statistics that are applied).\n\n## Line plots\n\nLet's have a look at another dataset: the `economics` dataset from the US. Learn more about it with `?economics`, and have a peak at its structure with:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(economics)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [574 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ date    : Date[1:574], format: \"1967-07-01\" \"1967-08-01\" ...\n $ pce     : num [1:574] 507 510 516 512 517 ...\n $ pop     : num [1:574] 198712 198911 199113 199311 199498 ...\n $ psavert : num [1:574] 12.6 12.6 11.9 12.9 12.8 11.8 11.7 12.3 11.7 12.3 ...\n $ uempmed : num [1:574] 4.5 4.7 4.6 4.9 4.7 4.8 5.1 4.5 4.1 4.6 ...\n $ unemploy: num [1:574] 2944 2945 2958 3143 3066 ...\n```\n\n\n:::\n:::\n\n\n\nDo you think that unemployment is stable over the years? Let's have a look with a line plot, often used to visualise time series:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = economics,\n       mapping = aes(x = date,\n                     y = unemploy)) + \n    geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nLet's go through our essential elements once more:\n\n* The `ggplot()` function initialises a ggplot object. In it, we declare the **input data frame** and specify the set of plot aesthetics used throughout all layers of our plot;\n* The `aes()` function groups our **mappings of aesthetics to variables**;\n* The `geom_<...>()` function specifies what **geometric element** we want to use.\n\n## Scatterplots\n\nScatterplots are often used to look at the relationship between two variables. Let's try it with a new dataset: `mpg` (which stands for \"miles per gallon\"), a dataset about fuel efficiency of different models of cars.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mpg\nstr(mpg)\n```\n:::\n\n\n\nDo you think that big engines use fuel more efficiently than small engines?\n\nWe can focus on two variables:\n\n* `displ`: a car’s engine size, in litres.\n* `hwy`: a car’s fuel efficiency on the highway, in miles per gallon.\n\nFor the geometry, we now have use \"points\":\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg,\n       mapping = aes(x = displ,\n                     y = hwy)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nNotice how the points seem to be aligned on a grid? That's because the data was rounded. If we want to better visualise the density of points, we can use the \"count\" geometry, which makes the dots bigger when data points have the same `x` and `y` values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg,\n       mapping = aes(x = displ,\n                     y = hwy)) +\n    geom_count()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nAlternatively, we can avoid overlapping of points by using the \"jitter\" geometry, which gives the points a little shake:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg,\n       mapping = aes(x = displ,\n                     y = hwy)) +\n    geom_jitter()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nEven though the position of the dots does not match exactly the original `x` and `y` values, it does help visualise densities better.\n\nThe plot shows a negative relationship between engine size (`displ`) and fuel efficiency (`hwy`). In other words, cars with big engines use more fuel. Does this confirm or refute your hypothesis about fuel efficiency and engine size?\n\nHowever, we can see some outliers. We need to find out more about our data.\n\n## Adding aesthetics\n\nWe can highlight the \"class\" factor by adding a new aesthetic:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg,\n       mapping = aes(x = displ,\n                     y = hwy,\n                     colour = class)) +\n    geom_jitter()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nIt seems that two-seaters are more fuel efficient than other cars with a similar engine size, which can be explained by the lower weight of the car. The general trend starts to make more sense!\n\nWe now know how to create a simple scatterplot, and how to visualise extra variables. But how can we better represent a correlation?\n\n## Trend lines\n\nA trend line can be created with the `geom_smooth()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg,\n       aes(x = displ,\n           y = hwy)) +\n    geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n> We stopped using the argument names because we know in which order they appear: first the data, then the mapping of aesthetics. Let's save ourselves some typing from now on!\n\nThe console shows you what function / formula was used to draw the trend line. This is important information, as there are countless ways to do that. To better understand what happens in the background, open the function's help page and notice that the default value for the `method` argument is \"NULL\". Read up on how it automatically picks a suitable method depending on the sample size, in the \"Arguments\" section.\n\nWant a linear trend line instead? Add the argument `method = \"lm\"` to your function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg,\n       aes(x = displ,\n           y = hwy)) +\n    geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n## Layering\n\nA trend line is usually displayed on top of the scatterplot. How can we combine several layers? We can string them with the `+` operator:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg,\n       aes(x = displ,\n           y = hwy)) + \n    geom_point() +\n    geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n> The order of the functions matters: the points will be drawn before the trend line, which is probably what you're after.\n\n## The `colour` aesthetic\n\nWe can once again add some information to our visualisation by mapping the `class` variable to the `colour` aesthetic:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg,\n       aes(x = displ,\n           y = hwy)) + \n    geom_point(aes(colour = class)) + \n    geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n**Challenge 1 – where should aesthetics be defined?**\n\nTake the last plot we created:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg,\n       aes(x = displ,\n           y = hwy)) + \n    geom_point(aes(colour = class)) + \n    geom_smooth()\n```\n:::\n\n\n\nWhat would happen if you moved the `colour = class` aesthetic from the geometry function to the `ggplot()` call?\n\nDifferent geometries can also have their own mappings that overwrite the defaults.\nIf you place mappings in a geom function, ggplot2 will treat them as local mappings for the layer. It will use these mappings to extend or overwrite the global mappings for that layer only. This makes it possible to display different aesthetics in different layers.\n\n## Saving a plot\n\nLike your visualisation? You can export it with the \"Export\" menu in the \"Plots\" pane.\n\n* Building a document or a slideshow? You can copy it straight to your clipboard, and paste it into it.\n* A PDF is a good, quick option to export an easily shareable file with vector graphics. Try for example the \"A5\" size, the \"Landscape\" orientation, and save it into your \"plots\" directory.\n* More options are available in the \"Save as image...\" option. PNG is a good compressed format for graphics, but if you want to further customise your visualisation in a different program, use SVG or EPS, which are vector formats. (Try to open an SVG file in [Inkscape](https://inkscape.org/) for example.)\n\nTo save the last plot with a command, you can use the `ggsave()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"plots/fuel_efficiency.png\")\n```\n:::\n\n\n\nThis is great to automate the export process for each plot in your script, but `ggsave()` also has extra options, like setting the DPI, which is useful for getting the right resolution for a specific use. For example, to export a plot for your presentation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"plots/fuel_efficiency.png\", dpi = \"screen\")\n```\n:::\n\n\n\n> Saving a .svg file with requires installing the svglite package. This packages seems so work best installing in a fresh R session (Session > Restart R) from source `install.packages(\"svglite\", type = \"source\")`. Then load the library `library(svglite)` rerun your code including loading previous libraries (`ggplot2` etc.) and now saving a plot with a .svg extension should work! \n\n**Challenge 2 – add a variable and a smooth line**\n\nLet's use a similar approach to what we did with the `mpg` dataset.\n\nTake our previous unemployment visualisation, but represented with points this time:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics,\n       aes(x = date,\n           y = unemploy)) + \n    geom_point()\n```\n:::\n\n\n\nHow could we:\n\n1. Add a smooth line for the number of unemployed people. Are there any interesting arguments that could make the smoother more useful?\n2. Colour the points according to the median duration of unemployment (see `?economics`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics,\n       aes(x = date,\n           y = unemploy)) + \n    geom_point(aes(colour = uempmed)) +\n    geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n> See how the legend changes depending on the type of data mapped to the `colour` aesthetic? (i.e. categorical vs continuous)\n\nThis default \"trend line\" is not particularly useful. We could make it follow the data more closely by using the `span` argument. The closer to 0, the closer to the data the smoother will be:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics,\n       aes(x = date,\n           y = unemploy)) + \n    geom_point(aes(colour = uempmed)) +\n    geom_smooth(span = 0.1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nYou can now see why this is called a \"smoother\": we can fit a smooth curve to data that varies a lot.\n\nTo further refine our visualisation , we could visualise the unemployment rate rather than the number of unemployed people, by calculating it straight into our code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics,\n       aes(x = date,\n           y = unemploy / pop)) + \n    geom_point(aes(colour = uempmed)) +\n    geom_smooth(span = 0.1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\nThe [early 1980s recession](https://en.wikipedia.org/wiki/Early_1980s_recession) now seems to have had a more significant impact on unemployment than the [Global Financial Crisis](https://en.wikipedia.org/wiki/Financial_crisis_of_2007%E2%80%9308) of 2007-2008.\n\n## Bar charts and ordered factors\n\nLet's use the `diamonds` dataset now.\nThe `diamonds` dataset comes with ggplot2 and contains information about ~54,000 diamonds, including the price, carat, colour, clarity, and cut quality of each diamond.\n\nLet's have a look at the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds\nsummary(diamonds)\n?diamonds\n```\n:::\n\n\n\nBack to bar charts. Consider a basic bar chart, as drawn with `geom_bar()`. The following chart displays the total number of diamonds in the `diamonds` dataset, grouped by cut:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds,\n       aes(x = cut)) + \n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\nThe chart shows that more diamonds are available with high quality cuts than with low quality cuts.\n\n`cut` is an ordered factor, which you can confirm by printing it to the console:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(diamonds$cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Ideal     Premium   Good      Premium   Good      Very Good\nLevels: Fair < Good < Very Good < Premium < Ideal\n```\n\n\n:::\n:::\n\n\n\nSee how ggplot2 respects that order in the bar chart?\n\n### Customising a plot\n\nLet's see how we can customise our bar chart's look.\n\n#### Change a geometry's default colour\n\nFirst, we can pick our favourite colour in `geom_bar()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds,\n       aes(x = cut)) + \n    geom_bar(fill = \"tomato\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\nIf you are curious about what colour names exist in R, you can use the `colours()` function.\n\n### Change labels\n\nWe can also modify labels with the `labs()` function to make our plot more self-explanatory:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds,\n       aes(x = cut)) + \n    geom_bar(fill = \"tomato\") +\n    labs(title = \"Where are the bad ones?\",\n         x = \"Quality of the cut\",\n         y = \"Number of diamonds\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\nLet's have a look at what `labs()` can do:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?labs\n```\n:::\n\n\n\nIt can edit the title, the subtitle, the x and y axes labels, and the caption.\n\n> Remember that captions and titles are better sorted out in the publication itself, especially for accessibility reasons (e.g. to help with screen readers).\n\n### Horizontal bar charts\n\nFor a horizontal bar chart, we can map the `cut` variable to the `y` aesthetic instead of `x`. But remember to also change your labels around!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds,\n       aes(y = cut)) + # switch here...\n  geom_bar(fill = \"tomato\") +\n  labs(title = \"Where are the bad ones?\",\n       y = \"Quality of the cut\", # ...but also here!\n       x = \"Number of diamonds\") # ...and here!\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\nThis is particularly helpful when long category names overlap under the x axis.\n\n### Built-in themes\n\nThe `theme()` function allows us to really get into the details of our plot's look, but some `theme_*()` functions make it easy to apply a built-in theme, like `theme_bw()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds,\n       aes(y = cut)) + \n  geom_bar(fill = \"tomato\") +\n  labs(title = \"Where are the bad ones?\",\n       y = \"Quality of the cut\",\n       x = \"Number of diamonds\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\nTry `theme_minimal()` as well, and if you want more options, install the `ggthemes` package!\n\n## Play time!\n\n**Challenge 3: explore geometries**\n\nWhen creating a new layer, start typing `geom_` and see what suggestions pop up. Are there any suggestions that sound useful or familiar to you?\n\nModify your plots, play around with different layers and functions, and ask questions!\n\n## Close project\n\nClosing RStudio will ask you if you want to save your workspace and scripts.\nSaving your workspace is usually not recommended if you have all the necessary commands in your script.\n\n## Useful links\n\n* For ggplot2:\n  + [ggplot2 cheatsheet](https://www.rstudio.org/links/data_visualization_cheat_sheet)\n  + Official [ggplot2 documentation](https://ggplot2.tidyverse.org/reference/)\n  + Official [ggplot2 website](https://ggplot2.tidyverse.org/)\n  + [Chapter on data visualisation](https://r4ds.hadley.nz/data-visualize.html) in the book _R for Data Science_\n  + [From Data to Viz](https://www.data-to-viz.com/), a website to explore different visualisations and the code that generates them\n  + Selva Prabhakaran's [_r-statistics.co_ section on ggplot2](https://r-statistics.co/ggplot2-Tutorial-With-R.html)\n  + [Coding Club's data visualisation tutorial](https://ourcodingclub.github.io/tutorials/datavis/)\n  + [STHDA's ggplot2 essentials](https://www.sthda.com/english/wiki/ggplot2-essentials)\n* Our compilation of [general R resources](/R/usefullinks.md)\n",
    "supporting": [
      "ggplot2_intro_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}