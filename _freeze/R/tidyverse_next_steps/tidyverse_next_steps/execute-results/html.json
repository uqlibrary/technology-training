{
  "hash": "35a32a65d2126c4ddd23ef99fa6174f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R tidyverse: loops and data tidying\"\neditor: source\ndate: today\nauthor: UQ Library\n---\n\n\n\n\n\n\n## Setting up\n\n> If needed, review the [installation instructions](/R/Installation.md#r--rstudio-installation-instructions).\n\n* If you are using your own laptop please open RStudio\n    + Make sure you have a working Internet connection\n* On the Library's training computers:\n    + Log in with your UQ username and password\n    + Make sure you have a working Internet connection\n    + Open the ZENworks application\n    + Look for \"RStudio\"\n    + Double click on RStudio, which will install both R and RStudio\n\nWith RStudio open, let's make sure we have the necessary packages installed by running this command (this might take a few minutes):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n\nThis will install all the Tidyverse packages (and their dependencies).\n\n## What are we going to learn?\n\ntidyr and purrr, just like dplyr and ggplot2, are core to the Tidyverse.\n\n* tidyr can be used to tidy your data\n* purrr is useful to apply functions iteratively on lists or vectors\n\n## Create a project and a script\n\nUse the project menu (top right) to create a \"New project...\". Let's name this one \"tidyverse\".\n\nWe also want to work more comfortably by typing our code in a script. You can use the new file dropdown menu, or <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>N</kbd>, and save your script as \"process.R\" in the current working directory.\n\n## Load the necessary packages\n\nWe can use one single command to load the 8 core Tidyverse packages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tidyverse' was built under R version 4.4.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggplot2' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'purrr' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'lubridate' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n## Tidy data\n\nTidy data makes it easy to transform and analyse data in R (and many other tools). Tidy data has observations in rows, and variables in columns. The whole Tidyverse is designed to work with tidy data.\n\nOften, a dataset is organised in a way that makes it easy for humans to read and populate. This is usually called \"wide format\". Tidy data is _usually_ in \"long\" format.\n\nThe ultimate rules of tidy data are:\n\n* Each row is an observation\n* Each column is a variable\n* Each cell contains one single value\n\n> To learn more about Tidy Data, you can read [Hadley Wickham's 2014 article on the topic](https://www.jstatsoft.org/index.php/jss/article/view/v059i10/v59i10.pdf).\n\n### Import data\n\nWe are using a [dataset from the World Bank](https://datacatalog.worldbank.org/dataset/climate-change-data), which contains data about energy consumption and greenhouse gas emissions.\n\nLet's download the file:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# download data, save locally\ndownload.file(url = \"https://raw.githubusercontent.com/uqlibrary/technology-training/master/R/tidyverse_next_steps/data_wb_climate.csv\",\n              destfile = \"data_wb_climate.csv\")\n```\n:::\n\n\n\n\n... and read the data into an object:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read CSV into an object\nclimate_raw <- read_csv(\"data_wb_climate.csv\",\n                    na = \"..\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1165 Columns: 28\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Country code, Country name, Series code, Series name\ndbl (23): SCALE, Decimals, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1...\nlgl  (1): 2011\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\nWe defined with the `na` argument that, in this dataset, missing data is recorded as \"..\".\n\nYou can use `View()` to explore your dataset. We can see that it doesn't respect the tidy data principles in a couple of ways, the most obvious one being that different years are spread out between different columns.\n\n### Reshaping data\n\n#### Lengthening\n\nTo go from wide format to long format, we can use the tidyr function `pivot_longer()`. Here, we want to gather all the columns titled with a year: we store the data in a \"value\" variable, and the years in a \"year\" variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_long <- pivot_longer(climate_raw,\n                             `1990`:`2011`,\n                             names_to = \"year\",\n                             values_to = \"value\")\n```\n:::\n\n\n\n\nColumn names are stored as character by default, so we also use an extra argument to convert the type for the year column from character to integer:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_long <- pivot_longer(climate_raw,\n                             `1990`:`2011`,\n                             names_to = \"year\",\n                             values_to = \"value\",\n                             names_transform = as.integer)\n```\n:::\n\n\n\n\nThis is better, but there is still an issue: our `value` variable contains many different indicators (i.e. entirely different units).\n\n#### Widening\n\nTo do the opposite, going from long to wide format, we can use the `pivot_wider()` function.\n\nWe have single observations spread across several rows, so we should spread the \"value\" column.\n\nFirst, let's keep a record of the correspondence between long descriptive variable names and their \"code\", for later reference:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncodes <- climate_long |> \n  select(`Series code`, `Series name`) |> \n  unique()\ncodes\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Series code\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Series name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"EG.USE.COMM.GD.PP.KD\",\"2\":\"Energy use per units of GDP (kg oil eq./$1,000 of 2005 PPP $)\"},{\"1\":\"EG.USE.PCAP.KG.OE\",\"2\":\"Energy use per capita (kilograms of oil equivalent)\"},{\"1\":\"EN.ATM.CO2E.KT\",\"2\":\"CO2 emissions, total (KtCO2)\"},{\"1\":\"EN.ATM.CO2E.PC\",\"2\":\"CO2 emissions per capita (metric tons)\"},{\"1\":\"EN.ATM.CO2E.PP.GD.KD\",\"2\":\"CO2 emissions per units of GDP (kg/$1,000 of 2005 PPP $)\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\nThis will be our key to variable details, or \"code book\", for future reference.\n\nNow, let's widen the data (and remove some useless columns with `dplyr::select()`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_tidy <- climate_long |> \n  select(-`Series name`, -SCALE, -Decimals) |> \n  pivot_wider(names_from = `Series code`,\n              values_from = value)\n```\n:::\n\n\n\n\n### Challenge 1: Code comprehension\n\nThere's one more cleaning step we need to apply.\n\nHave a look at this block of code. What do you think it does?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups <- c(\"Europe & Central Asia\",\n            \"East Asia & Pacific\",\n            \"Euro area\",\n            \"High income\",\n            \"Lower middle income\",\n            \"Low income\",\n            \"Low & middle income\",\n            \"Middle income\",\n            \"Middle East & North Africa\",\n            \"Latin America & Caribbean\",\n            \"South Asia\",\n            \"Small island developing states\",\n            \"Sub-Saharan Africa\",\n            \"Upper middle income\",\n            \"World\")\nclimate_tidy <- climate_tidy |> \n  filter(!`Country name` %in% groups)\n```\n:::\n\n\n\n\nTurns out this dataset contains grouped data as well as unique countries. Here, we created a vector of group names, and removed them from the data by using dplyr's `filter()` function (inverting the filter with `!`).\n\nWe can now check that we've only got single countries left:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(climate_tidy$`Country name`)\n```\n:::\n\n\n\n\n### Visualising\n\nNow that we have clean, tidy data, we can process and visualise it more comfortably! For example, to visualise the increase in KT of CO<sup>2</sup>-equivalent for each country:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_tidy |> \n  ggplot(aes(x = year,\n             y = EN.ATM.CO2E.KT,\n             group = `Country name`)) +\n  geom_line()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1091 rows containing missing values or values outside the scale range\n(`geom_line()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](tidyverse_next_steps_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Challenge 2\n\nLooks like our data is missing after 2008, so how can we remove that?\n\nOne solution is to remove rows with missing data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nco2e_no_na <- climate_tidy |> \n  filter(!is.na(EN.ATM.CO2E.KT))\n\nggplot(co2e_no_na,\n       aes(x = year,\n           y = EN.ATM.CO2E.KT,\n           group = `Country name`)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](tidyverse_next_steps_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nAlternatively, we could filter on the actual year. (Which would not be ideal if the data was to be updated in the future!)\n\nThere are a lot of countries represented here. This kind of visualisation would benefit from focusing on a handful of countries we're interested in, depending on what story we are telling. We can then overlay two line geometries: one for the whole dataset, and the other for our selection.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find top 4 for 2008\ntop4 <- co2e_no_na |> \n  filter(year == 2008) |> \n  arrange(desc(EN.ATM.CO2E.KT)) |>\n  pull(`Country name`) |> \n  head(4)\n# plot them on top of the rest\nggplot(co2e_no_na,\n       aes(x = year,\n           y = EN.ATM.CO2E.KT,\n           group = `Country name`)) +\n  geom_line(colour = \"darkgrey\") +\n  geom_line(data = filter(co2e_no_na, `Country name` %in% top4),\n            mapping = aes(colour = `Country name`)) +\n  labs(y = \"CO2-equivalent (KT)\",\n       colour = \"Top emitters\")\n```\n\n::: {.cell-output-display}\n![](tidyverse_next_steps_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n## Functional programming\n\nFunctional programming (as opposed to \"imperative programming\") makes use of functions rather than loops to iterate over objects.\nThe functions will allow to simplify our code, by abstracting common building blocks used in different cases of iteration. However, it means that there will usually be a different function for each different pattern.\n\nYou can iterate over elements by using:\n\n1. the basic building blocks in R (for loops, while loops...), or\n2. the `apply` function family from base R, or\n3. the purrr functions.\n\nImagine we want to find out the median value for each variable in the `mtcars` dataset. Here is an example of a for loop:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput <- vector(\"double\", ncol(mtcars))\nfor (i in seq_along(mtcars)) {\n  output[[i]] <- median(mtcars[[i]])\n}\noutput\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  19.200   6.000 196.300 123.000   3.695   3.325  17.710   0.000   0.000\n[10]   4.000   2.000\n```\n\n\n:::\n:::\n\n\n\n\nBetter than having the same code repeated 11 times!\n\nWe allocate space in the expected **output** first (more efficient). We then specify the **sequence** for the loop, and put what we want to iterate in the loop **body**.\n\nThe apply family in base R is useful to replace for loops, but the purrr functions are easier to learn because they are more consistent. This package offers several tools to iterate functions over elements in a vector or a list (e.g. a dataframe).\n\n### The map family\n\nAt purrr's core, there is the map family:\n\n* `map()` outputs a list.\n* `map_lgl()` outputs a logical vector.\n* `map_int()` outputs an integer vector.\n* `map_dbl()` outputs a double vector.\n* `map_chr()` outputs a character vector.\n\nFor example, to do a similar operation to our previous for loop:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dbl(mtcars, median)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    mpg     cyl    disp      hp    drat      wt    qsec      vs      am    gear \n 19.200   6.000 196.300 123.000   3.695   3.325  17.710   0.000   0.000   4.000 \n   carb \n  2.000 \n```\n\n\n:::\n:::\n\n\n\n\nA lot leaner, right?\n\nThe map functions automatically name the values in the resulting vector, which makes the result easier to read.\n\nLets try a different type of output. Here, we want to find out which columns in the starwars dataset are numeric variables:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_lgl(starwars, is.numeric)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name     height       mass hair_color skin_color  eye_color birth_year \n     FALSE       TRUE       TRUE      FALSE      FALSE      FALSE       TRUE \n       sex     gender  homeworld    species      films   vehicles  starships \n     FALSE      FALSE      FALSE      FALSE      FALSE      FALSE      FALSE \n```\n\n\n:::\n:::\n\n\n\n\nIf we don't want to use the default behaviour of the mapped function, we can use extra arguments to pass to it. For example, for a trimmed mean:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dbl(mtcars, mean, trim = 0.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     mpg      cyl     disp       hp     drat       wt     qsec       vs \n 19.2200   6.3000 219.1750 137.9000   3.5755   3.1970  17.8175   0.4000 \n      am     gear     carb \n  0.3500   3.5500   2.7000 \n```\n\n\n:::\n:::\n\n\n\n\nJust like most functions in the Tidyverse, the first argument is the data that we want to process (which means we can use the pipe). The second argument is the name of the function we want to apply, but it can also be a custom formula. For example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# round the mean to closest integer\nmap_int(mtcars, ~ round(mean(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n  20    6  231  147    4    3   18    0    0    4    3 \n```\n\n\n:::\n\n```{.r .cell-code}\n# is the maximum more than three times the minimum?\nmap_lgl(mtcars, ~ max(.x) > 3 * min(.x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb \n TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE \n```\n\n\n:::\n:::\n\n\n\n\nWe have to use the tilde `~` to introduce a custom formula, and `.x` to place the element being processed.\n\n#### Challenge 3: custom formula\n\nHow can we find out the number of unique values in each variable of the `starwars` data.frame?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_int(starwars, ~ length(unique(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name     height       mass hair_color skin_color  eye_color birth_year \n        87         46         39         12         31         15         37 \n       sex     gender  homeworld    species      films   vehicles  starships \n         5          3         49         38         24         11         16 \n```\n\n\n:::\n:::\n\n\n\n\n### Splitting\n\nTo split a dataset and apply an operation to separate parts, we can use the `group_split()` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(mtcars$cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 4 8\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars |> \n  group_split(cyl) |> # split into three dataframes\n  map(summary) # applied to each dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n      mpg             cyl         disp              hp              drat      \n Min.   :21.40   Min.   :4   Min.   : 71.10   Min.   : 52.00   Min.   :3.690  \n 1st Qu.:22.80   1st Qu.:4   1st Qu.: 78.85   1st Qu.: 65.50   1st Qu.:3.810  \n Median :26.00   Median :4   Median :108.00   Median : 91.00   Median :4.080  \n Mean   :26.66   Mean   :4   Mean   :105.14   Mean   : 82.64   Mean   :4.071  \n 3rd Qu.:30.40   3rd Qu.:4   3rd Qu.:120.65   3rd Qu.: 96.00   3rd Qu.:4.165  \n Max.   :33.90   Max.   :4   Max.   :146.70   Max.   :113.00   Max.   :4.930  \n       wt             qsec             vs               am        \n Min.   :1.513   Min.   :16.70   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:1.885   1st Qu.:18.56   1st Qu.:1.0000   1st Qu.:0.5000  \n Median :2.200   Median :18.90   Median :1.0000   Median :1.0000  \n Mean   :2.286   Mean   :19.14   Mean   :0.9091   Mean   :0.7273  \n 3rd Qu.:2.623   3rd Qu.:19.95   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :3.190   Max.   :22.90   Max.   :1.0000   Max.   :1.0000  \n      gear            carb      \n Min.   :3.000   Min.   :1.000  \n 1st Qu.:4.000   1st Qu.:1.000  \n Median :4.000   Median :2.000  \n Mean   :4.091   Mean   :1.545  \n 3rd Qu.:4.000   3rd Qu.:2.000  \n Max.   :5.000   Max.   :2.000  \n\n[[2]]\n      mpg             cyl         disp             hp             drat      \n Min.   :17.80   Min.   :6   Min.   :145.0   Min.   :105.0   Min.   :2.760  \n 1st Qu.:18.65   1st Qu.:6   1st Qu.:160.0   1st Qu.:110.0   1st Qu.:3.350  \n Median :19.70   Median :6   Median :167.6   Median :110.0   Median :3.900  \n Mean   :19.74   Mean   :6   Mean   :183.3   Mean   :122.3   Mean   :3.586  \n 3rd Qu.:21.00   3rd Qu.:6   3rd Qu.:196.3   3rd Qu.:123.0   3rd Qu.:3.910  \n Max.   :21.40   Max.   :6   Max.   :258.0   Max.   :175.0   Max.   :3.920  \n       wt             qsec             vs               am        \n Min.   :2.620   Min.   :15.50   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:2.822   1st Qu.:16.74   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :3.215   Median :18.30   Median :1.0000   Median :0.0000  \n Mean   :3.117   Mean   :17.98   Mean   :0.5714   Mean   :0.4286  \n 3rd Qu.:3.440   3rd Qu.:19.17   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :3.460   Max.   :20.22   Max.   :1.0000   Max.   :1.0000  \n      gear            carb      \n Min.   :3.000   Min.   :1.000  \n 1st Qu.:3.500   1st Qu.:2.500  \n Median :4.000   Median :4.000  \n Mean   :3.857   Mean   :3.429  \n 3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :5.000   Max.   :6.000  \n\n[[3]]\n      mpg             cyl         disp             hp             drat      \n Min.   :10.40   Min.   :8   Min.   :275.8   Min.   :150.0   Min.   :2.760  \n 1st Qu.:14.40   1st Qu.:8   1st Qu.:301.8   1st Qu.:176.2   1st Qu.:3.070  \n Median :15.20   Median :8   Median :350.5   Median :192.5   Median :3.115  \n Mean   :15.10   Mean   :8   Mean   :353.1   Mean   :209.2   Mean   :3.229  \n 3rd Qu.:16.25   3rd Qu.:8   3rd Qu.:390.0   3rd Qu.:241.2   3rd Qu.:3.225  \n Max.   :19.20   Max.   :8   Max.   :472.0   Max.   :335.0   Max.   :4.220  \n       wt             qsec             vs          am              gear      \n Min.   :3.170   Min.   :14.50   Min.   :0   Min.   :0.0000   Min.   :3.000  \n 1st Qu.:3.533   1st Qu.:16.10   1st Qu.:0   1st Qu.:0.0000   1st Qu.:3.000  \n Median :3.755   Median :17.18   Median :0   Median :0.0000   Median :3.000  \n Mean   :3.999   Mean   :16.77   Mean   :0   Mean   :0.1429   Mean   :3.286  \n 3rd Qu.:4.014   3rd Qu.:17.55   3rd Qu.:0   3rd Qu.:0.0000   3rd Qu.:3.000  \n Max.   :5.424   Max.   :18.00   Max.   :0   Max.   :1.0000   Max.   :5.000  \n      carb     \n Min.   :2.00  \n 1st Qu.:2.25  \n Median :3.50  \n Mean   :3.50  \n 3rd Qu.:4.00  \n Max.   :8.00  \n```\n\n\n:::\n:::\n\n\n\n\nUsing purrr functions with ggplot2 functions allows us to generate several plots in one command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  group_split(cyl) |> \n  map(~ ggplot(.x, aes(wt, mpg)) +\n        geom_point() +\n        geom_smooth() +\n        labs(title = paste(.x$cyl, \"cylinders\"))) # give a title\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](tidyverse_next_steps_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](tidyverse_next_steps_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[3]]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](tidyverse_next_steps_files/figure-html/unnamed-chunk-21-3.png){width=672}\n:::\n:::\n\n\n\n\n### Predicate functions\n\nPurrr also contains functions that check for a condition, so we can set up conditions before iterating.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\niris |>\n  map_dbl(mean) # warning, NA for Species\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in mean.default(.x[[i]], ...): argument is not numeric or logical:\nreturning NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSepal.Length  Sepal.Width Petal.Length  Petal.Width      Species \n    5.843333     3.057333     3.758000     1.199333           NA \n```\n\n\n:::\n\n```{.r .cell-code}\niris |>\n  discard(is.factor) |> \n  map_dbl(mean) # clean!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \n```\n\n\n:::\n\n```{.r .cell-code}\nstarwars |> \n  keep(is.character) |> \n  map_int(~length(unique(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name hair_color skin_color  eye_color        sex     gender  homeworld \n        87         12         31         15          5          3         49 \n   species \n        38 \n```\n\n\n:::\n:::\n\n\n\n\n`is.factor()` and `is.character()` are examples of \"predicate functions\".\n\nTo return everything, but apply a function only if a condition is met, we can use `map_if()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\niris |>\n  map_if(is.numeric, round) |> \n  str()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ Sepal.Length: num [1:150] 5 5 5 5 5 5 5 5 4 5 ...\n $ Sepal.Width : num [1:150] 4 3 3 3 4 4 3 3 3 3 ...\n $ Petal.Length: num [1:150] 1 1 1 2 1 2 1 2 1 2 ...\n $ Petal.Width : num [1:150] 0 0 0 0 0 0 0 0 0 0 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n:::\n\n\n\n\nThis results in a list in which the elements are rounded only if they store numeric data.\n\nNow, let's see a more involved example with our climate dataset. In this one, we use functions from dplyr, purrr, stringr, tibble and ggplot2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cumulative and yearly change in CO2 emissions dataset\nclimate_cumul <- climate_tidy |> \n  arrange(`Country name`, year) |> \n  group_by(`Country name`) |>\n  mutate(cumul.CO2.KT = cumsum(EN.ATM.CO2E.KT),\n         dif.CO2.KT = EN.ATM.CO2E.KT - lag(EN.ATM.CO2E.KT)) |>\n  map_at(vars(ends_with(\"KT\")), ~ .x / 10^6) |> \n  as_tibble() |>  # from list to tibble\n  rename_with(~ str_replace(.x, \"KT\", \"PG\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `vars()` in .at was deprecated in purrr 1.0.0.\n```\n\n\n:::\n\n```{.r .cell-code}\n# visualise cumulative change\np <- climate_cumul |>\n  ggplot() +\n  aes(x = year,\n      y = cumul.CO2.PG,\n      colour = `Country name`) +\n  geom_line() +\n  theme(legend.position = \"none\")\np\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1541 rows containing missing values or values outside the scale range\n(`geom_line()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](tidyverse_next_steps_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\nIf you want to create an interactive visualisation, you can use plotly:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\nggplotly(p)\n```\n:::\n\n\n\n\nPlot the annual change in PG CO2 by country:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdif <- climate_cumul |>\n  ggplot() +\n  aes(x = year,\n      y = dif.CO2.PG,\n      colour = `Country name`) +\n  geom_line() +\n  theme(legend.position = \"none\")\npdif\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1292 rows containing missing values or values outside the scale range\n(`geom_line()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](tidyverse_next_steps_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# interactive plot\nggplotly(pdif)\n```\n:::\n\n\n\n\n## What next\n\n* [Chapter on iteration](https://r4ds.had.co.nz/iteration.html) in the book _R for Data Science_\n* Cheatsheets:\n    * [tidyr](https://raw.githubusercontent.com/rstudio/cheatsheets/master/tidyr.pdf)\n    * [purrr](https://raw.githubusercontent.com/rstudio/cheatsheets/master/purrr.pdf)\n* Explore our [recommended resources, online and around UQ](/R/usefullinks.md#what-next)\n* [Tidy Data paper](https://www.jstatsoft.org/index.php/jss/article/view/v059i10/v59i10.pdf)",
    "supporting": [
      "tidyverse_next_steps_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}