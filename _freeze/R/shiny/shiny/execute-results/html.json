{
  "hash": "e3c5b43d34847397d14d284326d1938a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'R advanced: webapps with Shiny'\neditor: source\ndate: today\nauthor: UQ Library\n---\n\n\n\n\n\n## Shiny webapps\n\nShiny is a package that allows to create a web application with R code.\n\nA Shiny app requires two main elements:\n\n* a user interface (UI)\n* a server\n\nLet's build an app from scratch, using our ACORN data and functions.\n\nWhat we want to create is a small webapp that visualises Australian temperature data and gives the user a bit of control over the visualisation.\n\n### Setting up\n\n#### Base project\n\nWe will first download our base project that contains custom functions to get our data ready.\n\n* Download the [project archive](https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Fuqlibrary%2Ftechnology-training%2Ftree%2Fmaster%2FR%2Fpackaging), and extract it wherever you'd like to store your project.\n* Open the .Rproj file\n* Create a new script: \"New File > R Script\"\n\n#### Get the data\n\nWe can source our custom functions that make it easier for us to download the ACORN data and merge all the datasets into one big file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"get_acorn.R\")\nsource(\"read_station.R\")\nsource(\"merge_acorn.R\")\nget_acorn(\"acorn_data\")\nlibrary(tidyverse)\nall_stations <- merge_acorn(\"acorn_data\")\n```\n:::\n\n\n\nWe now have a single object that contains data from 112 weather stations around Australia.\n\n### Create a new app\n\nIn our project, let's create a new app with \"File > New File > Shiny Web App...\". We will stick to \"single file\", and the current project directory as the location.\n\nIn our files, we can now see a \"myApp\" directory that contains an \"app.R\" script.\n\nThe app is currently an example app. We can run it with the \"Run App\" button, and you can see what kind of interaction a basic Shiny app can offer: a slider to change the number of bins in a histogram, for example.\n\n### Creating a minimal skeleton\n\nFor our app to work, we need three sections:\n\n* define a UI: what users see\n* define a server: what happens in the background\n* define how the app is run\n\nBack in the app.R file, we can start with this empty skeleton:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary packages\nlibrary(shiny)\n\n# UI\nui <- fluidPage()\n\n# Server\nserver <- function(input, output) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n\nRunning it will show a blank page. Let's add a title:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# UI\nui <- fluidPage(\n  titlePanel(\"ACORN data explorer\")\n)\n```\n:::\n\n\n\n\n### Prepare the data\n\nNow, let's make sure we have the data ready to be used in our app. We don't want to do the summarising of our data every time we run the app, so let's save the finished product into an RDS file. Back in our first script, let's write:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# process for monthly average\nmonthly <- all_stations %>% \n    group_by(month = month(date),\n             year = year(date)) %>% \n    summarise(mean.max = mean(max.temp, na.rm = TRUE))\n```\n:::\n\n\n\nLet's save that object into our app directory, so the app can find it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(monthly, \"myApp/monthly.rds\")\n```\n:::\n\n\n\nThis dataset will be the base of our Shiny app.\n\n\n### Interactive tables\n\nWe can now read that data file into our app, process it, and present it in an interactive table, using the DT package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import data\nmonthly <- readRDS(\"monthly.rds\")\n\n# Load necessary packages\nlibrary(shiny)\nlibrary(DT)\n\n# Define UI\nui <- fluidPage(\n    titlePanel(\"ACORN data explorer\"),\n    DTOutput(\"dt\")\n)\n\n# Define server logic\nserver <- function(input, output) {\n    output$dt <- renderDT({\n        monthly\n    })\n}\n```\n:::\n\n\n\nNotice that we had to define an output in the server section (with a \"render\" function), and use that output in a UI function (with an \"output\" function).\n\n#### Plots\n\nNow, for a different kind of output, let's add a plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary packages\nlibrary(shiny)\nlibrary(DT)\n\n# Define UI\nui <- fluidPage(\n    titlePanel(\"ACORN data explorer\"),\n    plotOutput(\"plot\"),\n    DTOutput(\"dt\")\n)\n\n# Define server logic\nserver <- function(input, output) {\n    output$dt <- renderDT({\n        monthly\n    })\n    \n    output$plot <- renderPlot({\n            ggplot(monthly,\n               aes(x = year, y = month, fill = mean.max)) +\n            geom_tile() +\n            scale_fill_distiller(palette = \"RdYlBu\")\n    })\n}\n```\n:::\n\n\n\nAgain, we have to:\n\n* Define how the plot is generated on the server\n* Save the plot as an output, using the right `render*` function\n* Show the plot in the UI with the right `*Output` function\n\n#### User input\n\nHow can we add some interaction? We could give the user control over which month they want to visualise by adding a slider:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary packages\nlibrary(shiny)\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Define UI\nui <- fluidPage(\n    titlePanel(\"ACORN data explorer\"),\n    # input slider for months\n    sliderInput(\"month\",\n                \"Pick a month:\",\n                min = 1,\n                max = 12,\n                value = 1),\n    plotOutput(\"plot\"),\n    DTOutput(\"dt\")\n)\n\n# Define server logic\nserver <- function(input, output) {\n    output$dt <- renderDT({\n        monthly\n    })\n    \n    output$plot <- renderPlot({\n        monthly %>% \n            filter(month == input$month) %>% \n            ggplot(aes(x = year, y = month, fill = mean.max)) +\n            geom_tile() +\n            scale_fill_distiller(palette = \"RdYlBu\")\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n\n### Challenge 1: restore an \"all months\" option?\n\nHow could we give the option to go back to the full-year view?\n\nHint: have a look at `?selectInput`, or find other ideas on this list: https://shiny.rstudio.com/tutorial/written-tutorial/lesson3/\n\nOne solution could be:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define UI for application that draws a histogram\nui <- fluidPage(\n    titlePanel(\"ACORN data explorer\"),\n    # input slider for months\n    selectInput(\"month\",\n                \"Pick one or more months:\",\n                1:12,\n                multiple = TRUE),\n    plotOutput(\"plot\"),\n    DTOutput(\"dt\")\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n    output$dt <- renderDT({\n        monthly\n    })\n    \n    output$plot <- renderPlot({\n        monthly %>% \n            filter(month %in% input$month) %>% \n            ggplot(aes(x = year, y = month, fill = mean.max)) +\n            geom_tile() +\n            scale_fill_distiller(palette = \"RdYlBu\")\n    })\n}\n```\n:::\n\n\n\n### Theming\n\nTo change the theme of the app, we can use the bslib package, and change the `theme` argument in `fluidPage()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary packages\nlibrary(shiny)\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(bslib)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n    theme = bs_theme(bootswatch = \"solar\"),\n    titlePanel(\"ACORN data explorer\"),\n    # input slider for months\n    selectInput(\"month\",\n                \"Pick one or more months:\",\n                1:12,\n                multiple = TRUE),\n    plotOutput(\"plot\"),\n    DTOutput(\"dt\")\n)\n```\n:::\n\n\n\nYou can see the different themes available with the `bootswatch_themes()` function.\n\nThis is great to quickly change the general look of our app, but our visualisation looks out of place: how can we also change the theme for ggplot2? Let's use the convenient thematic package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary packages\nlibrary(shiny)\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(bslib)\nlibrary(thematic)\nthematic_shiny()\n```\n:::\n\n\n\nNow, the theme propagates to ggplot2 visualisations.\n\n### Challenge 2: make the plot interactive\n\nUsing the plotly package, how could you make the plot interactive?\n\nRemember to change the code that generates the plot _as well as_ the render and output functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import data\nmonthly <- readRDS(\"monthly.rds\")\n\n# Load necessary packages\nlibrary(shiny)\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(bslib)\nlibrary(thematic)\nthematic_shiny()\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n    theme = bs_theme(bootswatch = \"solar\"),\n    titlePanel(\"ACORN data explorer\"),\n    # input slider for months\n    selectInput(\"month\",\n                \"Pick one or more months:\",\n                1:12,\n                multiple = TRUE),\n    plotlyOutput(\"plot\"),\n    DTOutput(\"dt\")\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n    output$dt <- renderDT({\n        monthly\n    })\n    \n    output$plot <- renderPlotly({\n        p <- monthly %>% \n            filter(month %in% input$month) %>%\n            ggplot(aes(x = year, y = month, fill = mean.max)) +\n            geom_tile() +\n            scale_fill_distiller(palette = \"RdYlBu\")\n        ggplotly(p)\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n\nThe user can now hover over parts of the plot to see the corresponding data.\n\n## Publishing a Shiny app\n\nYou can use [ShinyApps.io](https://www.shinyapps.io/), which offers free or paid accounts. This is integrated into RStudio to easily deploy and updae your applications.\n\nWe also have access to ARDC's [Nectar](https://dashboard.rc.nectar.org.au) (National eResearch Collaboration Tools and Resources project), in which we can request a virtual machine and deploy a Shiny server.\n\nOther options exist, see for example this [comparison table](https://hosting.analythium.io/assets/files/shiny-hosting-options.html).\n\n## Useful links\n\n* [Official Shiny tutorial](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html)\n* [Gallery of Shiny examples](https://shiny.posit.co/r/gallery/)\n* Hadley Wickham's book _[Mastering Shiny](https://mastering-shiny.org/index.html)_\n* [Shiny cheatsheet](https://rstudio.github.io/cheatsheets/html/shiny.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}